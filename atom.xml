<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Oxymorus Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.oxymorus.com/"/>
  <updated>2019-06-19T10:58:44.000Z</updated>
  <id>https://www.oxymorus.com/</id>
  
  <author>
    <name>Oleksii Zghurskyi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Back-pressure patterns in practice</title>
    <link href="https://www.oxymorus.com/backpressure/"/>
    <id>https://www.oxymorus.com/backpressure/</id>
    <published>2019-06-19T10:58:44.000Z</published>
    <updated>2019-06-19T10:58:44.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Back-pressure is an important feedback mechanism that allows systems to gracefully respond to load rather than collapse under it. The back-pressure may cascade all the way up to the user, at which point responsiveness may degrade, but this mechanism will ensure that the system is resilient under load.</p></div><a id="more"></a><div class="sect1"><h2>Back-Pressure</h2><div class="sectionbody"><div class="paragraph"><p>This is how it&#8217;s defined in <a href="https://www.reactivemanifesto.org/glossary#Back-Pressure" target="_blank" rel="noopener">Reactive Manifesto</a>:</p></div><div class="quoteblock"><blockquote><div class="paragraph"><p><strong>Back-Pressure</strong></p></div><div class="paragraph"><p>When one component is struggling to keep-up, the system as a whole needs to respond in a sensible way. It is unacceptable for the component under stress to fail catastrophically or to drop messages in an uncontrolled fashion. Since it can’t cope and it can’t fail it should communicate the fact that it is under stress to upstream components and so get them to reduce the load. This back-pressure is an important feedback mechanism that allows systems to gracefully respond to load rather than collapse under it. The back-pressure may cascade all the way up to the user, at which point responsiveness may degrade, but this mechanism will ensure that the system is resilient under load, and will provide information that may allow the system itself to apply other resources to help distribute the load.</p></div></blockquote></div><div class="paragraph"><p>Let&#8217;s illustrate the context, that requires to apply back-pressure.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/backpressure.png"><img src="/images/backpressure.png" alt="backpressure"></a></div></div></div></div><div class="paragraph"><p>So, essentially the problem here is the mismatch in throughput between services.</p></div></div></div><div class="sect1"><h2>Strategies to deal with throughput mismatch</h2><div class="sectionbody"><div class="paragraph"><p>There are several strategies to deal with throughput mismatch:</p></div><div class="ulist"><ul><li><p><em>Auto-scale</em> service, that is under pressure</p></li><li><p><em>Drop down (or sample)</em> incoming requests, once service under pressure is saturated</p></li><li><p><em>Buffer</em> requests</p></li><li><p><em>Control</em> the request producer</p></li></ul></div><div class="sect2"><h3>Auto-scaling</h3><div class="paragraph"><p>Probably, auto-scaling is the easiest way to deal with the problem. E.g. in the example above the solution would be to scale the <strong>service B</strong> up - this definitely will resolve throughput deficit. In some cases this will be just enough, but in other - auto-scaling might lead to propagating the problem to the next service (e.g. <strong>service C</strong>). Also, if you are in severe cost/hardware deficit, scaling up is simply not feasible.</p></div></div><div class="sect2"><h3>Dropping down or sampling</h3><div class="paragraph"><p>Only some fraction of incoming requests is processed, other are simply ignored. E.g. in the example above to solve the problem it would be enough for <strong>service B</strong> to just skip processing every 3rd request. However, most often it&#8217;s not applicable in practice</p></div></div><div class="sect2"><h3>Buffering requests</h3><div class="paragraph"><p>Probably, applying buffer is the most intuitive thing to do. E.g. in the example above this approach can be implemented by introducing messaging queue between <strong>service A and B</strong> or, alternatively, storing incoming request to the database. This, in essence, allows <strong>service B</strong> to pull requests from buffer, when it&#8217;s ready to process them. However, beside the complication in infrastructure it&#8217;s not always possible, since not all requests might be processed asynchronously.</p></div></div><div class="sect2"><h3>Controlling the request producer</h3><div class="paragraph"><p>Controlling the request producer is, actually, defined as"back-pressure" by Reactive Manifesto. In the example above it means, that <strong>service B</strong> should be able to slow down/speed up <strong>service A</strong>. So, <strong>service A</strong> should not <em>push</em> requests to <strong>service B</strong>, instead <strong>service B</strong> should <em>pull</em> desired number of requests from <strong>service A</strong>. However, controlling producer speed is not always an option (imaging telling your user to slow down). Also, back-pressure mechanism introduces complexity in the system, so should be decided carefully.</p></div></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>Whenever there is a mismatch in throughput between services there might be the opportunity to apply back-pressure pattern.</p></div><div class="paragraph"><p>What strategy should be applied really depends on the constraints and requirements at hand.</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Back-pressure is an important feedback mechanism that allows systems to gracefully respond to load rather than collapse under it. The back-pressure may cascade all the way up to the user, at which point responsiveness may degrade, but this mechanism will ensure that the system is resilient under load.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://www.oxymorus.com/categories/reactive/"/>
    
      <category term="Back-Pressure" scheme="https://www.oxymorus.com/categories/reactive/back-pressure/"/>
    
    
      <category term="back-pressure" scheme="https://www.oxymorus.com/tags/back-pressure/"/>
    
  </entry>
  
  <entry>
    <title>Trick Of The Day: Cloning all Github repositories</title>
    <link href="https://www.oxymorus.com/clone-all-github-repos/"/>
    <id>https://www.oxymorus.com/clone-all-github-repos/</id>
    <published>2019-06-17T22:52:55.000Z</published>
    <updated>2019-06-17T22:52:55.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>This post gives simple shell pipeline to clone all github repositories for specific organization.</p></div><a id="more"></a><div class="sect1"><h2>Situation</h2><div class="sectionbody"><div class="paragraph"><p>You need to clone all repos for your organization on github/on-premise github. Since there might be plenty of repos you don&#8217;t want to repeat yourself and prefer automate this process.</p></div></div></div><div class="sect1"><h2>Solution</h2><div class="sectionbody"><div class="ulist"><ul><li><p>Create an API token by going to Account Settings &#8594; Applications</p></li><li><p>Clone repos:</p></li></ul></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-sh hljs" data-lang="sh">$ GITHUB_BASE_URL={api.github.com|yourcompanygithub}; CONTEXT={users|orgs}; NAME={username|orgname}; ACCESS_TOKEN={yourtoken}$ curl "https://$GITHUB_BASE_URL/api/v3/$CONTEXT/$NAME/repos?page=1&amp;per_page=100&amp;access_token=$ACCESS_TOKEN" \     | jq '.[] | .clone_url' \     | xargs -L1 git clone</code></pre></div></div><div class="paragraph"><p><strong>Notes:</strong></p></div><div class="olist arabic"><ol class="arabic"><li><p><em>CONTEXT=users</em> and <em>NAME=yourusername</em> will clone all your repositories.</p></li><li><p><em>CONTEXT=orgs</em> and <em>NAME=yourorgname</em> will clone all repositories of your organization.</p></li><li><p>The solutions assumes you have <a href="https://stedolan.github.io/jq/manual/" target="_blank" rel="noopener">jq</a> installed. <em>If you haven&#8217;t, it&#8217;s time to do it.</em></p></li></ol></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;This post gives simple shell pipeline to clone all github repositories for specific organization.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Github" scheme="https://www.oxymorus.com/categories/github/"/>
    
      <category term="clone" scheme="https://www.oxymorus.com/categories/github/clone/"/>
    
      <category term="jq" scheme="https://www.oxymorus.com/categories/github/clone/jq/"/>
    
    
      <category term="Github" scheme="https://www.oxymorus.com/tags/github/"/>
    
      <category term="clone" scheme="https://www.oxymorus.com/tags/clone/"/>
    
      <category term="jq" scheme="https://www.oxymorus.com/tags/jq/"/>
    
  </entry>
  
  <entry>
    <title>Trick Of The Day: Copy DB dump from one Docker container to another</title>
    <link href="https://www.oxymorus.com/docker-mysql-dump/"/>
    <id>https://www.oxymorus.com/docker-mysql-dump/</id>
    <published>2019-04-23T22:52:55.000Z</published>
    <updated>2019-04-23T22:52:55.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>How to copy MySQL dump from one Docker container to another ?</p></div><a id="more"></a><div class="sect1"><h2>Situation</h2><div class="sectionbody"><div class="paragraph"><p>You need to create DB dump in one Docker container and apply it in another Docker container.</p></div></div></div><div class="sect1"><h2>Application</h2><div class="sectionbody"><div class="paragraph"><p>Crate DB dump on staging env and apply it on local env to experiment with existing database.</p></div></div></div><div class="sect1"><h2>Solution</h2><div class="sectionbody"><div class="olist arabic"><ol class="arabic"><li><p>Connect to first container:</p></li></ol></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-sh hljs" data-lang="sh">$ docker exec -ti mysql-staging /bin/bash</code></pre></div></div><div class="olist arabic"><ol class="arabic"><li><p>Create DB dump:</p></li></ol></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-sh hljs" data-lang="sh">$ mysqldump -u user -p --databases db &gt; /tmp/db.sql</code></pre></div></div><div class="olist arabic"><ol class="arabic"><li><p>Copy dump to localhost:</p></li></ol></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-sh hljs" data-lang="sh"># general syntax:# docker cp CONTAINER:SRC_PATH DEST_PATH$ docker cp mysql:/tmp/db.sql /tmp/db.sql</code></pre></div></div><div class="olist arabic"><ol class="arabic"><li><p>Copy dump to second container:</p></li></ol></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-sh hljs" data-lang="sh"># general syntax:# docker cp DEST_PATH CONTAINER:SRC_PATH$ docker cp /tmp/db.sql mysql:/tmp/db.sql</code></pre></div></div><div class="olist arabic"><ol class="arabic"><li><p>Apply DB dump:</p></li></ol></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-sh hljs" data-lang="sh">$ docker exec -ti mysql /bin/bash$ mysql -u user -p-- Run the backup script to recreate the databasemysql&gt; drop database if exists db;mysql&gt; source /tmp/db.sql</code></pre></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;How to copy MySQL dump from one Docker container to another ?&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://www.oxymorus.com/categories/docker/"/>
    
      <category term="MySQL" scheme="https://www.oxymorus.com/categories/docker/mysql/"/>
    
      <category term="dump" scheme="https://www.oxymorus.com/categories/docker/mysql/dump/"/>
    
    
      <category term="Docker" scheme="https://www.oxymorus.com/tags/docker/"/>
    
      <category term="MySQL" scheme="https://www.oxymorus.com/tags/mysql/"/>
    
  </entry>
  
</feed>
