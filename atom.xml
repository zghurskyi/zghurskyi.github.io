<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Oxymorus Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.zghurskyi.com/"/>
  <updated>2022-03-08T20:36:51.000Z</updated>
  <id>https://www.zghurskyi.com/</id>
  
  <author>
    <name>Oleksii Zghurskyi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RUSSIAN GENOCIDE IN UKRAINE</title>
    <link href="https://www.zghurskyi.com/russia-invaded-ukraine/"/>
    <id>https://www.zghurskyi.com/russia-invaded-ukraine/</id>
    <published>2022-03-08T20:36:51.000Z</published>
    <updated>2022-03-08T20:36:51.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>I am Ukrainian.</p></div><a id="more"></a><div class="paragraph"><p>Russia is bombing Kyiv, Kharkiv, Sumy, Mariupol, Mykolayiv and many other Ukrainian cities. Russian occupants are shelling hospitals, kindergartens, residential buildings. In Mariupol, the city surrounded by Russian troops, a 6-year-old girl has died from dehydration&#8230;&#8203; in 2022&#8230;&#8203; in the Europe&#8230;&#8203;</p></div><div class="paragraph"><p>My country needs your help! <strong>Any help matters a lot for us today!</strong></p></div><div class="paragraph"><p>Sharing the <a href="https://ukraine2022photo.net/" target="_blank" rel="noopener">truth</a> about the war in Ukraine or donating - everything is important and can save the lives of innocent people in Ukraine!</p></div><div class="paragraph"><p>Below are links to trustworthy organizations in need of funds to continue saving and caring for the people of Ukraine. If you can - please donate to them or share these links amongst your friends in social media.</p></div><div class="paragraph"><p>THANK YOU!</p></div><div class="paragraph"><p><a href="https://bank.gov.ua/en/news/all/natsionalniy-bank-vidkriv-spetsrahunok-dlya-zboru-koshtiv-na-potrebi-armiyi" target="_blank" rel="noopener">Ukraine Humanitarian Assistance Account</a></p></div><div class="paragraph"><p><a href="https://bank.gov.ua/en/news/all/natsionalniy-bank-vidkriv-spetsrahunok-dlya-zboru-koshtiv-na-potrebi-armiyi" target="_blank" rel="noopener">Ukraine Armed Forces</a></p></div><div class="paragraph"><p><a href="https://www.comebackalive.in.ua/" target="_blank" rel="noopener">The Come Back Alive Fund</a></p></div><div class="paragraph"><p><a href="https://novaukraine.org/" target="_blank" rel="noopener">Nova Ukraine</a></p></div><div class="paragraph"><p><a href="https://razomforukraine.org/" target="_blank" rel="noopener">Razom</a></p></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;I am Ukrainian.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Ukraine" scheme="https://www.zghurskyi.com/categories/ukraine/"/>
    
    
      <category term="Ukraine" scheme="https://www.zghurskyi.com/tags/ukraine/"/>
    
  </entry>
  
  <entry>
    <title>Pessimistic locking with Aerospike and Project Reactor</title>
    <link href="https://www.zghurskyi.com/pessimistic-locking-with-reactor-and-aerospike/"/>
    <id>https://www.zghurskyi.com/pessimistic-locking-with-reactor-and-aerospike/</id>
    <published>2020-12-06T20:47:51.000Z</published>
    <updated>2020-12-06T20:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>How to implement pessimistic locking with Aerospike and Project Reactor ?</p></div><a id="more"></a><div class="sect1"><h2>1. Introduction</h2><div class="sectionbody"><div class="paragraph"><p><a href="https://martinfowler.com/eaaCatalog/pessimisticOfflineLock.html" target="_blank" rel="noopener">Pessimistic locking</a> is general pattern commonly used to maintain data consistency.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="https://martinfowler.com/eaaCatalog/PessimisticSketch.gif" target="_blank" rel="noopener"><img src="https://martinfowler.com/eaaCatalog/PessimisticSketch.gif" alt="PessimisticSketch"></a></div></div></div></div><div class="paragraph"><p>In this post I will describe how to implement pessimistic locking with No-SQL storage, that has reactive client.</p></div></div></div><div class="sect1"><h2>2. Pessimistic lock interface</h2><div class="sectionbody"><div class="paragraph"><p>We will support following operations: <code>tryAcquire</code> and <code>release</code></p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">public interface PessimisticLock {    Mono&lt;Boolean&gt; tryAcquire(String key);    Mono&lt;Boolean&gt; release(String key);}</code></pre></div></div></div></div><div class="sect1"><h2>3. Implementation</h2><div class="sectionbody"><div class="paragraph"><p>To implement pessimistic locking we will use special bin with no value and short expiration (to prevent hanged locks). The idea is simple:</p></div><div class="ulist"><ul><li><p>if there is a record in storage for given key, then lock is acquired by some other concurrent service</p></li><li><p>if there is no record, then lock is free and current service can acquire it</p></li></ul></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Slf4j@RequiredArgsConsturctorpublic class DefaultPessimisticLock implements PessimisticLock {    private final IAerospikeReactorClient client;    private final RetryProperties retryProperties;    private final LockProperties lockProperties;    private final AerospikeProperties aerospikeProperties;    @Override    public Mono&lt;Boolean&gt; tryAcquire(String key) {        Key lockKey = toLockKey(key);        Bin lockBin = toLockBin(key);        return Mono.defer(() -&gt; client.put(acquirePolicy(), lockKey, lockBin).map(Objects::nonNull))                .retryWhen(Retries.aerospikeError(retryProperties))                .onErrorMap(error -&gt; {                    log.warn("Failed to acquire lock " + key, error);                    return new PessimisticLockAcquireException("Failed to acquire lock " + key, error);                });    }    @Override    public Mono&lt;Boolean&gt; release(String key) {        Key lockKey = toLockKey(key);        return client.delete(releasePolicy(), lockKey)                .map(Objects::nonNull)                .onErrorResume(error -&gt; {                    log.warn("Failed to release lock " + key, error);                    return Mono.just(Boolean.FALSE);                })                .defaultIfEmpty(Boolean.TRUE);    }    private Key toLockKey(String key) {        return new Key(aerospikeProperties.getNamespace(), aerospikeProperties.getSetName(), key);    }    private Bin toLockBin(String key) {        return new Bin(lockProperties.getBinName(), key);    }    private WritePolicy acquirePolicy() {        WritePolicy putPolicy = new WritePolicy();        putPolicy.recordExistsAction = RecordExistsAction.CREATE_ONLY;        putPolicy.expiration = lockProperties.getExpirationInSeconds();        return putPolicy;    }    private WritePolicy releasePolicy() {        WritePolicy deletePolicy = new WritePolicy();        deletePolicy.generationPolicy = GenerationPolicy.NONE;        return deletePolicy;    }}</code></pre></div></div></div></div><div class="sect1"><h2>4. Testing</h2><div class="sectionbody"><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@RunWith(MockitoJUnitRunner.class)public class DefaultPessimisticLockTest {    private static final String TEST_KEY = "123";    private static final AerospikeException AEROSPIKE_TIMEOUT_EXCEPTION = new AerospikeException(ResultCode.TIMEOUT, "Aerospike timeout");    private static final AerospikeException AERSOPIKE_KEY_EXISTS_EXCEPTION = new AerospikeException(ResultCode.KEY_EXISTS_ERROR, "Key exists");    @Mock    private IAerospikeReactorClient client;    @Spy    private AerospikeProperties aerospikeProperties = new AerospikeProperties();    @Spy    private RetryProperties retryProperties = new RetryProperties();    @Spy    private LockProperties lockProperties = new LockProperties();    @InjectMocks    private DefaultPessimisticLock pessimisticLock;    @Test    public void lockAcquireExceptionIsThrownIfTimeoutReachedAfterRetry() {        Mockito.when(client.put(Mockito.any(WritePolicy.class), Mockito.any(Key.class), Mockito.any(Bin.class)))                .thenReturn(Mono.error(AEROSPIKE_TIMEOUT_EXCEPTION));        StepVerifier.withVirtualTime(() -&gt; pessimisticLock.tryAcquire(TEST_KEY))                .expectSubscription()                .thenAwait(Duration.ofMillis(1001))                .expectError(PessimisticLockAcquireException.class)                .verify();    }    @Test    public void lockIsAcquiredAfterRetryWithExponentialBackOff() {        Key testKey = new Key(aerospikeProperties.getNamespace(), transactionProperties.getSetName(), TEST_KEY);        Mockito.when(client.put(Mockito.any(WritePolicy.class), Mockito.any(Key.class), Mockito.any(Bin.class)))                .thenReturn(Mono.error(AEROSPIKE_TIMEOUT_EXCEPTION))                .thenReturn(Mono.error(AEROSPIKE_TIMEOUT_EXCEPTION))                .thenReturn(Mono.error(AERSOPIKE_KEY_EXISTS_EXCEPTION))                .thenReturn(Mono.just(testKey));        StepVerifier.withVirtualTime(() -&gt; pessimisticLock.tryAcquire(TEST_KEY))                .expectSubscription()                .thenAwait(Duration.ofMillis(50))                .thenAwait(Duration.ofMillis(100))                .thenAwait(Duration.ofMillis(200))                .expectNext(Boolean.TRUE)                .expectComplete()                .verify();    }    @Test    public void lockAcquireExceptionIsThrownIfKeyExistsError() {        Mockito.when(client.put(Mockito.any(WritePolicy.class), Mockito.any(Key.class), Mockito.any(Bin.class)))                .thenReturn(Mono.error(AERSOPIKE_KEY_EXISTS_EXCEPTION));        StepVerifier.withVirtualTime(() -&gt; pessimisticLock.tryAcquire(TEST_KEY))                .expectSubscription()                .thenAwait(Duration.ofMillis(1001))                .expectError(PessimisticLockAcquireException.class)                .verify();    }    @Test    public void lockIsAcquiredIfKeyBecomesAvailable() {        Key testKey = new Key(aerospikeProperties.getNamespace(), transactionProperties.getSetName(), TEST_KEY);        Mockito.when(client.put(Mockito.any(WritePolicy.class), Mockito.any(Key.class), Mockito.any(Bin.class)))                .thenReturn(Mono.error(AERSOPIKE_KEY_EXISTS_EXCEPTION))                .thenReturn(Mono.error(AERSOPIKE_KEY_EXISTS_EXCEPTION))                .thenReturn(Mono.just(testKey));        StepVerifier.withVirtualTime(() -&gt; pessimisticLock.tryAcquire(TEST_KEY))                .expectSubscription()                .thenAwait(Duration.ofMillis(50))                .thenAwait(Duration.ofMillis(100))                .expectNext(Boolean.TRUE)                .expectComplete()                .verify();    }    @Test    public void lockIsAcquiredSuccessfully() {        Key testKey = new Key(aerospikeProperties.getNamespace(), transactionProperties.getSetName(), TEST_KEY);        Mockito.when(client.put(Mockito.any(WritePolicy.class), Mockito.any(Key.class), Mockito.any(Bin.class)))                .thenReturn(Mono.just(testKey));        StepVerifier.withVirtualTime(() -&gt; pessimisticLock.tryAcquire(TEST_KEY))                .expectSubscription()                .expectNext(Boolean.TRUE)                .expectComplete()                .verify();    }    @Test    public void lockIsTreatedAsReleasedIfDoesNotExist() {        Mockito.when(client.delete(Mockito.any(WritePolicy.class), Mockito.any(Key.class)))                .thenReturn(Mono.empty());        StepVerifier.create(pessimisticLock.release(TEST_KEY))                .expectNext(Boolean.TRUE)                .expectComplete()                .verify();    }    @Test    public void lockIsNotReleasedIfExceptionDuringRelease() {        Mockito.when(client.delete(Mockito.any(WritePolicy.class), Mockito.any(Key.class)))                .thenReturn(Mono.error(AEROSPIKE_TIMEOUT_EXCEPTION));        StepVerifier.create(pessimisticLock.release(TEST_KEY))                .expectNext(Boolean.FALSE)                .expectComplete()                .verify();    }    @Test    public void lockIsReleasedSuccessfully() {        Key testKey = new Key(aerospikeProperties.getNamespace(), transactionProperties.getSetName(), TEST_KEY);        Mockito.when(client.delete(Mockito.any(WritePolicy.class), Mockito.any(Key.class)))                .thenReturn(Mono.just(testKey));        StepVerifier.create(pessimisticLock.release(TEST_KEY))                .expectNext(Boolean.TRUE)                .expectComplete()                .verify();    }}</code></pre></div></div></div></div><div class="sect1"><h2>5. Using with Reactor</h2><div class="sectionbody"><div class="paragraph"><p>We need to emulate <code>try-finally</code> semantic with Reactor operators. The code below achieves that goal:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Overridepublic &lt;T, R&gt; Mono&lt;R&gt; executeWithLock(String key, T data, OperationExecutor&lt;T, R&gt; operationExecutor) {    return pessimisticLockOperations.tryAcquire(key)            .flatMap(lockAcquired -&gt; operationExecutor.execute(data)                    .flatMap(operationResult -&gt; pessimisticLock.release(key)                            .map(Functions.constant(operationResult)))                    .onErrorResume(throwable -&gt; pessimisticLock.release(key)                            .map(Functions.constant(operationResult)))            );}</code></pre></div></div></div></div><div class="sect1"><h2>6. Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>Aerospike doesn&#8217;t have built-in mechanism for pessimistic locking. So to achieve required semantic one would need to implement locking directly.</p></div><div class="paragraph"><p>Another trick in the puzzle is <code>try-finally</code> semantic with Reactor.</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;How to implement pessimistic locking with Aerospike and Project Reactor ?&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Aerospike" scheme="https://www.zghurskyi.com/categories/aerospike/"/>
    
      <category term="Project Reactor" scheme="https://www.zghurskyi.com/categories/aerospike/project-reactor/"/>
    
      <category term="Pessimistic Locking" scheme="https://www.zghurskyi.com/categories/aerospike/project-reactor/pessimistic-locking/"/>
    
    
      <category term="Pessimistic Locking" scheme="https://www.zghurskyi.com/tags/pessimistic-locking/"/>
    
      <category term="Aerospike" scheme="https://www.zghurskyi.com/tags/aerospike/"/>
    
      <category term="Project Reactor" scheme="https://www.zghurskyi.com/tags/project-reactor/"/>
    
  </entry>
  
  <entry>
    <title>Optimistic locking with Aerospike and Project Reactor</title>
    <link href="https://www.zghurskyi.com/optimistic-locking-with-reactor-and-aerospike/"/>
    <id>https://www.zghurskyi.com/optimistic-locking-with-reactor-and-aerospike/</id>
    <published>2020-12-06T19:47:51.000Z</published>
    <updated>2020-12-06T19:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>How to implement optimistic locking with Aerospike and Project Reactor ?</p></div><a id="more"></a><div class="sect1"><h2>1. Introduction</h2><div class="sectionbody"><div class="paragraph"><p><a href="https://martinfowler.com/eaaCatalog/optimisticOfflineLock.html" target="_blank" rel="noopener">Optimistic locking</a> is general pattern commonly used to maintain data consistency.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="https://martinfowler.com/eaaCatalog/OptimisticSketch.gif" target="_blank" rel="noopener"><img src="https://martinfowler.com/eaaCatalog/OptimisticSketch.gif" alt="OptimisticSketch"></a></div></div></div></div><div class="paragraph"><p>In this post I will describe how to implement optimistic locking with No-SQL storage, that has reactive client.</p></div></div></div><div class="sect1"><h2>2. Aerospike <code>generation</code> meta-data</h2><div class="sectionbody"><div class="paragraph"><p>In traditional RDBMS to implement optimistic locking one would have to introduce additional <code>version</code> or <code>timestamp</code> column.</p></div><div class="paragraph"><p>In case of Aerospike, required data is available by default: each record has <code>generation</code> meta-data. So, in order to fail, when record is updated/deleted concurrently, one would need only enable <code>GenerationPolicy.EXPECT_GEN_EQUAL</code>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">ClientPolicy clientPolicy = new ClientPolicy();clientPolicy.writePolicyDefault.generationPolicy = GenerationPolicy.EXPECT_GEN_EQUAL;</code></pre></div></div><div class="paragraph"><p>Having above config in place ensures that update/delete will be executed successfully, if expected generation is equal to server generation, otherwise, update/delete will fail.</p></div></div></div><div class="sect1"><h2>3. Reactor <code>retryWhen</code> operation</h2><div class="sectionbody"><div class="paragraph"><p><a href="https://projectreactor.io/" target="_blank" rel="noopener">Project Reactor</a> is a fourth-generation Reactive library for building non-blocking applications on the JVM based on the <a href="https://github.com/reactive-streams/reactive-streams-jvm" target="_blank" rel="noopener">Reactive Streams Specification</a>.</p></div><div class="paragraph"><p>In the context of our goal, we will use <a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html#retryWhen-java.util.function.Function-" target="_blank" rel="noopener">retryWhen</a> operation:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/doc-files/marbles/retryWhenForMono.svg" target="_blank" rel="noopener"><img src="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/doc-files/marbles/retryWhenForMono.svg" alt="retryWhenForMono"></a></div></div></div></div></div></div><div class="sect1"><h2>4. Implementation</h2><div class="sectionbody"><div class="paragraph"><p>Now let&#8217;s put everything together and write method that performs <code>createOrUpdate</code> operation on <code>Data</code> instance:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">public Mono&lt;Data&gt; createOrUpdate(Data data) {    return Mono.defer(() -&gt; doCreateOrUpdate(data))            .retryWhen(Retries.optimisticLockException(retryProperties)                    .doOnRetry(context -&gt; log.warn("Retrying optimistic failure for data", data, context.exception()))            );}private Mono&lt;Data&gt; doCreateOrUpdate(Data data) {    return repository.findDataByKey(data.getKey())            .map(existingData -&gt; data.withGeneration(existingData.getGeneration()))            .flatMap(existingData -&gt; repository.createOrUpdate(existingData).map(Functions.constant(existingData)));}</code></pre></div></div></div></div><div class="sect1"><h2>5. Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>Implementing optimistic locking with Aerospike and Reactor is pretty straight-forward. Since all tools are already in place, all that needs to be done - put everything together.</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;How to implement optimistic locking with Aerospike and Project Reactor ?&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Aerospike" scheme="https://www.zghurskyi.com/categories/aerospike/"/>
    
      <category term="Project Reactor" scheme="https://www.zghurskyi.com/categories/aerospike/project-reactor/"/>
    
      <category term="Optimistic Locking" scheme="https://www.zghurskyi.com/categories/aerospike/project-reactor/optimistic-locking/"/>
    
    
      <category term="Optimistic Locking" scheme="https://www.zghurskyi.com/tags/optimistic-locking/"/>
    
      <category term="Aerospike" scheme="https://www.zghurskyi.com/tags/aerospike/"/>
    
      <category term="Project Reactor" scheme="https://www.zghurskyi.com/tags/project-reactor/"/>
    
  </entry>
  
  <entry>
    <title>Tool Of The Day: kafkacat</title>
    <link href="https://www.zghurskyi.com/kafkacat-overview/"/>
    <id>https://www.zghurskyi.com/kafkacat-overview/</id>
    <published>2020-12-05T15:53:41.000Z</published>
    <updated>2020-12-05T15:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Handy tool for quick producing/consuming Kafka messages and more.</p></div><a id="more"></a><div class="sect1"><h2>1. What is kafkacat ?</h2><div class="sectionbody"><div class="paragraph"><p>Citing official <a href="https://github.com/edenhill/kafkacat" target="_blank" rel="noopener">README</a>:</p></div><div class="quoteblock"><blockquote><div class="paragraph"><p><code>kafkacat</code> is a generic non-JVM producer and consumer for Apache Kafka &gt;=0.8, think of it as a netcat for Kafka.</p></div></blockquote></div><div class="paragraph"><p>Simply put&#8201;&#8212;&#8201;it&#8217;s very handy tool to work with Kafka.</p></div><div class="paragraph"><p>To understand what exactly the tools does, one should try it out. So, below I give simple walkthrough, that demonstrates how to set-up cluster with 1 broker and produce/consume messages with <code>kafkacat</code>. Without further ado&#8201;&#8212;&#8201;let&#8217;s start.</p></div></div></div><div class="sect1"><h2>2. Setting-up local Kafka cluster with one broker</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s quickly bootstrap local Kafka cluster:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">version: "3"services:  kafka-broker:    image: confluentinc/cp-kafka:latest    container_name: kafka-broker    ports:      - "9092:9092"    depends_on:      - zookeeper    environment:      KAFKA_BROKER_ID: 1      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1      KAFKA_MESSAGE_MAX_BYTES: 10000000  zookeeper:    image: confluentinc/cp-zookeeper:latest    container_name: zookeeper    ports:      - "2181:2181"    environment:      ZOOKEEPER_CLIENT_PORT: 2181      ZOOKEEPER_TICK_TIME: 2000      ZOOKEEPER_INIT_LIMIT: 5      ZOOKEEPER_SYNC_LIMIT: 2</code></pre></div></div><div class="paragraph"><p>Note: <code>KAFKA_AUTO_CREATE_TOPICS_ENABLE</code> is set to <code>"true"</code> deliberately, so we can experiment with producing /consuming without setting up topics beforehand.</p></div></div></div><div class="sect1"><h2>3. Using <code>kafkacat</code></h2><div class="sectionbody"><div class="paragraph"><p><code>kafkacat</code> docker image is available on <a href="https://hub.docker.com/r/confluentinc/cp-kafkacat/" target="_blank" rel="noopener">Docker Hub</a>. So, if you have docker installed&#8201;&#8212;&#8201;you can spend no time on installation, and just start using it.</p></div><div class="sect2"><h3>3.1. Metadata mode</h3><div class="sect3"><h4>List brokers and topics in cluster</h4><div class="paragraph"><p>This will print cluster metadata:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ docker run --tty --rm --interactive \             --network=host \             confluentinc/cp-kafkacat \             kafkacat -b localhost:9092 -L</code></pre></div></div><div class="paragraph"><p><code>-b</code>&#8201;&#8212;&#8201;broker <code>host:port</code><br><code>-L</code>&#8201;&#8212;&#8201;metadata mode (will list brokers and topics in the cluster)</p></div><div class="paragraph"><p>The above command outputs:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">Metadata for all topics (from broker 1: localhost:9092/1): 1 brokers:  broker 1 at localhost:9092 1 topics:  topic "__confluent.support.metrics" with 1 partitions:    partition 0, leader 1, replicas: 1, isrs: 1</code></pre></div></div></div></div><div class="sect2"><h3>3.2. Producer mode</h3><div class="sect3"><h4>Producing messages from a file</h4><div class="paragraph"><p>Let&#8217;s create file with messages:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ cat &gt;&gt; /tmp/orders.txt &lt;&lt;EOF&gt; 1:{"order_id":1,"order_ts":1534772501276,"total_amount":10.50,"customer_name":"Bob Smith"}&gt; 2:{"order_id":2,"order_ts":1534772605276,"total_amount":3.32,"customer_name":"Sarah Black"}&gt; 3:{"order_id":3,"order_ts":1534772742276,"total_amount":21.00,"customer_name":"Emma Turner"}&gt; EOF</code></pre></div></div><div class="paragraph"><p>Next, lets send messages from file to <code>orders</code> topic:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ docker run --tty --rm --interactive \             --network=host \             --volume /tmp/orders.txt:/data/orders.txt \             confluentinc/cp-kafkacat \             kafkacat -b locahost:9092 -t orders -P -l /data/orders.txt</code></pre></div></div><div class="paragraph"><p><code>-b</code>&#8201;&#8212;&#8201;broker <code>host:port</code><br><code>-t</code>&#8201;&#8212;&#8201;topic to produce to<br><code>-P</code>&#8201;&#8212;&#8201;produce mode<br><code>-l</code>&#8201;&#8212;&#8201;send messages from a file (only one file allowed)</p></div></div><div class="sect3"><h4>Producing messages inline</h4><div class="paragraph"><p>This will send three messages, with given <code>key:value</code>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ docker run --interactive --rm \             --network=host \             confluentinc/cp-kafkacat \             kafkacat -b localhost:9092 -t orders -K: -P &lt;&lt;EOF4:{"order_id":4,"order_ts":1534772801276,"total_amount":11.50,"customer_name":"Alina Smith"}5:{"order_id":5,"order_ts":1534772905276,"total_amount":13.32,"customer_name":"Alex Black"}6:{"order_id":6,"order_ts":1534773042276,"total_amount":31.00,"customer_name":"Emma Watson"}EOF</code></pre></div></div><div class="paragraph"><p><code>-b</code>&#8201;&#8212;&#8201;broker <code>host:port</code><br><code>-t</code>&#8201;&#8212;&#8201;topic to consume from<br><code>-K:</code>&#8201;&#8212;&#8201;print message keys prefixing the message with <code>:</code><br><code>-P</code>&#8201;&#8212;&#8201;produce mode<br><code>&lt;&lt;EOF &#8230;&#8203; EOF</code>&#8201;&#8212;&#8201;a <a href="http://tldp.org/LDP/abs/html/here-docs.html" target="_blank" rel="noopener">here document</a>, that redirects messages to be produced</p></div></div></div><div class="sect2"><h3>3.3. Consumer mode</h3><div class="sect3"><h4>Consuming messages from a topic</h4><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ docker run --tty --rm --interactive \             --network=host \             confluentinc/cp-kafkacat \             kafkacat -C -b localhost:9092 -K: \                      -f '\nKey (%K bytes): %k\t\nValue (%S bytes): %s\n\Partition: %p\tOffset: %o\n--\n' \                      -t orders -c 1</code></pre></div></div><div class="paragraph"><p><code>-C</code>&#8201;&#8212;&#8201;consume mode<br><code>-b</code>&#8201;&#8212;&#8201;broker <code>host:port</code><br><code>-K:</code>&#8201;&#8212;&#8201;print message keys prefixing the message with <code>:</code><br><code>-f</code>&#8201;&#8212;&#8201;output formatting string<br><code>-t</code>&#8201;&#8212;&#8201;topic to consume from<br><code>-c</code>&#8201;&#8212;&#8201;exit after producing 1 message</p></div><div class="paragraph"><p>The above command will consume all messages from <code>orders</code> topic:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">Key (-1 bytes):Value (90 bytes): 1:{"order_id":1,"order_ts":1534772501276,"total_amount":10.50,"customer_name":"Bob Smith"}Partition: 0Offset: 0</code></pre></div></div></div></div><div class="sect2"><h3>3.4. Query mode</h3><div class="paragraph"><p>Query mode allows to query offset by timestamp in the following format:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">kafkacat -Q -b broker -t &lt;topic&gt;:&lt;partition&gt;:&lt;timestamp&gt;</code></pre></div></div><div class="sect3"><h4>Consuming offset from a topic</h4><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ docker run --tty --rm --interactive \             --network=host \             confluentinc/cp-kafkacat \             kafkacat -Q -b localhost:9092 -t orders:0:-1</code></pre></div></div><div class="paragraph"><p><code>-Q</code>&#8201;&#8212;&#8201;query mode<br><code>-b</code>&#8201;&#8212;&#8201;broker <code>host:port</code><br><code>-t</code>&#8201;&#8212;&#8201;topic to consume from</p></div><div class="paragraph"><p>The above command will output:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">orders [0] offset 6</code></pre></div></div><div class="paragraph"><p>Now that we have the offset, let&#8217;s query all messages after specified offset:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ docker run --tty --rm --interactive \             --network=host \             confluentinc/cp-kafkacat \             kafkacat -q -b localhost:9092 -t orders -p 0 -o 5</code></pre></div></div><div class="paragraph"><p><code>-q</code>&#8201;&#8212;&#8201;be quite (verbosity set to 0)<br><code>-p</code>&#8201;&#8212;&#8201;partition<br><code>-o</code>&#8201;&#8212;&#8201;offset to start consuming from</p></div></div></div></div></div><div class="sect1"><h2>4. Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>That&#8217;s it for now. Hopefully, you learnt something interesting or useful ;)</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Handy tool for quick producing/consuming Kafka messages and more.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Apache Kafka" scheme="https://www.zghurskyi.com/categories/apache-kafka/"/>
    
      <category term="kafkacat" scheme="https://www.zghurskyi.com/categories/apache-kafka/kafkacat/"/>
    
      <category term="Docker" scheme="https://www.zghurskyi.com/categories/apache-kafka/kafkacat/docker/"/>
    
    
      <category term="Docker" scheme="https://www.zghurskyi.com/tags/docker/"/>
    
      <category term="Apache Kafka" scheme="https://www.zghurskyi.com/tags/apache-kafka/"/>
    
      <category term="kafkacat" scheme="https://www.zghurskyi.com/tags/kafkacat/"/>
    
  </entry>
  
  <entry>
    <title>Lost Update Phenomena</title>
    <link href="https://www.zghurskyi.com/lost-update/"/>
    <id>https://www.zghurskyi.com/lost-update/</id>
    <published>2020-09-29T12:35:12.000Z</published>
    <updated>2020-09-29T12:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p><a href="https://en.wikipedia.org/wiki/Write%E2%80%93write_conflict" target="_blank" rel="noopener">An update is lost</a> when a user overrides the current database state without realizing, that someone else changed it between the moment of data loading and the moment the update occurs. In this post, I will give detailed description of this phenomena and typical ways to prevent it.</p></div><a id="more"></a><div class="sect1"><h2>1. Lost Update Phenomena</h2><div class="sectionbody"><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/lost_update.png"><img src="/images/lost_update.png" alt="lost update"></a></div></div></div></div><div class="paragraph"><p>There are several approaches to prevent the problem:</p></div><div class="ulist"><ul><li><p>Change isolation level</p></li><li><p>Use pessimistic locking (<code>SELECT &#8230;&#8203; FOR UPDATE</code>)</p></li><li><p>Use optimistic locking (version or timestamp based)</p></li></ul></div></div></div><div class="sect1"><h2>2. Changing isolation level</h2><div class="sectionbody"><div class="paragraph"><p>Most databases use <code>READ COMMITTED</code> isolation level by default (MySQL - <code>REPEATABLE READ</code>). Choosing isolation level is always a trade-off between consistency and scalability.</p></div><div class="paragraph"><p>If lost update is pretty common scenario in the system, sometime it will make sense to use higher isolation level. For example, either <code>REPEATABLE READ</code> or <code>SERIALIZABLE</code> will prevent lost update from happening.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/lost_update_isolation_level.png"><img src="/images/lost_update_isolation_level.png" alt="lost update isolation level"></a></div></div></div></div><div class="paragraph"><p>In the situation above, if two transactions try to change the same record, the second will be forced to wait while the first either commits or rollbacks. And if the first transaction commits, the second will be aborted.</p></div><div class="paragraph"><p>The drawback of such approach, is that isolation level is set per database connection, that is not desirable or acceptable in most cases.</p></div></div></div><div class="sect1"><h2>3. Using pessimistic locking</h2><div class="sectionbody"><div class="paragraph"><p><a href="https://martinfowler.com/eaaCatalog/pessimisticOfflineLock.html" target="_blank" rel="noopener">Pessimistic locking</a> is a common tool used to maintain data consistency.</p></div><div class="paragraph"><p>In relational databases it is usually achieved by using <code>SELECT &#8230;&#8203; FOR UPDATE</code> with default <code>READ COMMITTED</code> isolation level (these combination will lead to acquiring write lock).</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/lost_update_pessimistic_locking.png"><img src="/images/lost_update_pessimistic_locking.png" alt="lost update pessimistic locking"></a></div></div></div></div><div class="paragraph"><p>So, if two transactions try to change the same record, the second will be forced to wait while the first either commits or rollbacks. After first transaction terminates, the second one will see changes and, therefore, no updates will be lost.</p></div><div class="paragraph"><p>It should be mentioned, that <strong>both</strong> transactions should acquire write locks, otherwise lost update won&#8217;t be prevented.</p></div></div></div><div class="sect1"><h2>4. Using optimistic locking</h2><div class="sectionbody"><div class="paragraph"><p><a href="https://martinfowler.com/eaaCatalog/optimisticOfflineLock.html" target="_blank" rel="noopener">The optimistic locking</a> doesn&#8217;t rely on acquiring write locks. It uses versioning to detect, that data was changed concurrently. If two transactions try to change the same record, the second one won&#8217;t change anything since it will use version, that no longer exist.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/lost_update_optimistic_locking.png"><img src="/images/lost_update_optimistic_locking.png" alt="lost update optimistic locking"></a></div></div></div></div><div class="paragraph"><p>So, every <code>UPDATE</code> will take version into the <code>WHERE</code> clause. Basically, it optimistically assumes, that no one changing the row concurrently. However, if another transaction commits a newer record version, the second transaction will no longer match any row and therefore the lost update is prevented.</p></div><div class="paragraph"><p>ORMs (e.g. Hibernate) use updated results count to check the number of updated rows. If no row was matched, <a href="https://docs.oracle.com/javaee/7/api/javax/persistence/OptimisticLockException.html" target="_blank" rel="noopener">OptimisticLockException</a> is thrown. After exception is thrown, the current transaction and persistence context are aborted.</p></div></div></div><div class="sect1"><h2>5. References</h2><div class="sectionbody"><div class="olist arabic"><ol class="arabic"><li><p><a href="https://martinfowler.com/eaaCatalog/pessimisticOfflineLock.html" target="_blank" rel="noopener">Pessimistic offline locking</a></p></li><li><p><a href="https://martinfowler.com/eaaCatalog/optimisticOfflineLock.html" target="_blank" rel="noopener">Optimistic offline locking</a></p></li><li><p><a href="https://vladmihalcea.com/a-beginners-guide-to-database-locking-and-the-lost-update-phenomena/" target="_blank" rel="noopener">A beginners guide to database locking and the lost update phenomena</a></p></li></ol></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Write%E2%80%93write_conflict&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;An update is lost&lt;/a&gt; when a user overrides the current database state without realizing, that someone else changed it between the moment of data loading and the moment the update occurs. In this post, I will give detailed description of this phenomena and typical ways to prevent it.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Data Access Layer" scheme="https://www.zghurskyi.com/categories/data-access-layer/"/>
    
      <category term="Lost Update" scheme="https://www.zghurskyi.com/categories/data-access-layer/lost-update/"/>
    
      <category term="Isolation" scheme="https://www.zghurskyi.com/categories/data-access-layer/lost-update/isolation/"/>
    
      <category term="Pessimistic Locking" scheme="https://www.zghurskyi.com/categories/data-access-layer/lost-update/isolation/pessimistic-locking/"/>
    
      <category term="Optimistic Locking" scheme="https://www.zghurskyi.com/categories/data-access-layer/lost-update/isolation/pessimistic-locking/optimistic-locking/"/>
    
    
      <category term="Data Access Layer" scheme="https://www.zghurskyi.com/tags/data-access-layer/"/>
    
      <category term="Lost Update" scheme="https://www.zghurskyi.com/tags/lost-update/"/>
    
      <category term="Isolation" scheme="https://www.zghurskyi.com/tags/isolation/"/>
    
      <category term="Pessimistic Locking" scheme="https://www.zghurskyi.com/tags/pessimistic-locking/"/>
    
      <category term="Optimistic Locking" scheme="https://www.zghurskyi.com/tags/optimistic-locking/"/>
    
  </entry>
  
  <entry>
    <title>How to install Zsh on Ubuntu</title>
    <link href="https://www.zghurskyi.com/zsh/"/>
    <id>https://www.zghurskyi.com/zsh/</id>
    <published>2020-08-28T22:07:41.000Z</published>
    <updated>2020-08-28T22:07:41.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Simply a list of steps on how to install <a href="https://www.zsh.org/" target="_blank" rel="noopener">Zsh</a> on Ubuntu and make it pretty.</p></div><a id="more"></a><div id="toc" class="toc"><div id="toctitle" class="title">Table of Contents</div><ul class="sectlevel1"><li><a href="#">1. Installing <code>Zsh</code></a></li><li><a href="#">2. Make <code>Zsh</code> default shell</a></li><li><a href="#">3. Install <code>Oh My Zsh</code></a><ul class="sectlevel2"><li><a href="#">3.1. Plugins</a></li><li><a href="#">3.2. Updating <code>Oh My Zsh</code></a></li><li><a href="#">3.3. Uninstalling <code>Oh My Zsh</code></a></li></ul></li><li><a href="#">4. Look and Feel</a><ul class="sectlevel2"><li><a href="#">4.1. Setup powerline fonts</a></li><li><a href="#">4.2. Agnoster Theme</a></li><li><a href="#">4.3. Solarized Colorscheme for Gnome Terminal</a></li></ul></li><li><a href="#">5. References:</a></li></ul></div><div class="sect1"><h2>1. Installing <code>Zsh</code></h2><div class="sectionbody"><div class="paragraph"><p><code>Zsh</code> is available in the official package repository of Ubuntu. So it’s very easy to install.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">sudo apt-get updatesudo apt-get install zshzsh --version</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">You can find more instructions for different platforms <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH" target="_blank" rel="noopener">here</a>.</td></tr></table></div></div></div><div class="sect1"><h2>2. Make <code>Zsh</code> default shell</h2><div class="sectionbody"><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">sudo usermod -s /usr/bin/zsh $(whoami)sudo reboot</code></pre></div></div><div class="paragraph"><p>After reboot press <span class="keyseq"><kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>T</kbd></span> to open terminal and choose option <strong>2</strong>. <code>Zsh</code> should create a new <code>~/.zshrc</code> configuration file with the recommended settings.</p></div></div></div><div class="sect1"><h2>3. Install <code>Oh My Zsh</code></h2><div class="sectionbody"><div class="paragraph"><p><a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener">oh-my-zsh</a> is an open source, community-driven framework for managing your <code>zsh</code> configuration.</p></div><div class="admonitionblock caution"><table><tr><td class="icon"><i class="fa icon-caution" title="Caution"></i></td><td class="content">Be aware, that installing <code>oh-my-zsh</code> changes the <code>~/.zshrc</code> configuration file.</td></tr></table></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</code></pre></div></div><div class="sect2"><h3>3.1. Plugins</h3><div class="paragraph"><p><code>oh-my-zsh</code> comes with a shitload of plugins for you to take advantage of. You can take a look in the <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins" target="_blank" rel="noopener">wiki</a> to see what&#8217;s currently available.</p></div><div class="paragraph"><p>To enable a plugin - just add its name to the <code>plugins</code> array in your <code>~/.zshrc</code> file. For example, to enable <code>git</code> plugin:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">nano ~/.zshrc# Find plugins section and add plugin to the listplugins=(  git)</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">If you still don&#8217;t have Git installed on your Ubuntu, simply run: <code>sudo apt-get install git</code></td></tr></table></div></div><div class="sect2"><h3>3.2. Updating <code>Oh My Zsh</code></h3><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">omz update</code></pre></div></div></div><div class="sect2"><h3>3.3. Uninstalling <code>Oh My Zsh</code></h3><div class="paragraph"><p>If you want to uninstall <code>oh-my-zsh</code>, just run command below: it will remove <code>oh-my-zsh</code> and revert your previous <code>bash</code> or <code>zsh</code> configuration.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">uninstall_oh_my_zsh</code></pre></div></div></div></div></div><div class="sect1"><h2>4. Look and Feel</h2><div class="sectionbody"><div class="sect2"><h3>4.1. Setup powerline fonts</h3><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">sudo apt-get install fonts-powerline</code></pre></div></div></div><div class="sect2"><h3>4.2. Agnoster Theme</h3><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">nano ~/.zshrc# change theme to agnosterZSH_THEME="agnoster"</code></pre></div></div></div><div class="sect2"><h3>4.3. Solarized Colorscheme for Gnome Terminal</h3><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">sudo apt-get install dconf-cligit clone git://github.com/sigurdga/gnome-terminal-colors-solarized.git ~/.solarizedcd ~/.solarized./install.sh</code></pre></div></div><div class="paragraph"><p>Choose option <strong>1</strong> for dark theme.</p></div><div class="paragraph"><p>After installation, open <code>~/.zshrc</code> and add the line:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-bash hljs" data-lang="bash">nano ~/.zshrc# add line beloweval `dircolors ~/.dir_colors/dircolors`</code></pre></div></div></div></div></div><div class="sect1"><h2>5. References:</h2><div class="sectionbody"><div class="ulist"><ul><li><p><a href="https://www.zsh.org/" target="_blank" rel="noopener">Zsh</a></p></li><li><p><a href="https://github.com/ohmyzsh/ohmyzsh" target="_blank" rel="noopener">Oh My Zsh</a></p></li><li><p><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins" target="_blank" rel="noopener">Oh My Zsh plugins</a></p></li><li><p><a href="https://github.com/aruhier/gnome-terminal-colors-solarized" target="_blank" rel="noopener">Solarized Colorscheme for Gnome Terminal</a></p></li></ul></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Simply a list of steps on how to install &lt;a href=&quot;https://www.zsh.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Zsh&lt;/a&gt; on Ubuntu and make it pretty.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="https://www.zghurskyi.com/categories/ubuntu/"/>
    
      <category term="zsh" scheme="https://www.zghurskyi.com/categories/ubuntu/zsh/"/>
    
      <category term="oh-my-zsh" scheme="https://www.zghurskyi.com/categories/ubuntu/zsh/oh-my-zsh/"/>
    
    
      <category term="Ubuntu" scheme="https://www.zghurskyi.com/tags/ubuntu/"/>
    
      <category term="zsh" scheme="https://www.zghurskyi.com/tags/zsh/"/>
    
      <category term="oh-my-zsh" scheme="https://www.zghurskyi.com/tags/oh-my-zsh/"/>
    
  </entry>
  
  <entry>
    <title>Installing Kubernetes with microk8s</title>
    <link href="https://www.zghurskyi.com/installing-kubernetes/"/>
    <id>https://www.zghurskyi.com/installing-kubernetes/</id>
    <published>2020-02-11T20:41:41.000Z</published>
    <updated>2020-02-11T20:41:41.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>This post is not overwhelmed with any theoretical or practical reflections about Kubernetes. I will just share very easy way of installing and getting started with Kubernetes in the matter of minutes.</p></div><div class="paragraph"><p>So, let&#8217;s not waste our time and get Kubernetes cluster up and running locally.</p></div><a id="more"></a><div class="paragraph"><p>There are many ways to get Kubernetes locally (with docker machine, minikube, etc.). However today I will share extremely easy to use tool&#8201;&#8212;&#8201;<a href="https://microk8s.io/" target="_blank" rel="noopener">microk8s</a>.</p></div><div class="sect1"><h2>1. Install <code>microk8s</code></h2><div class="sectionbody"><div class="paragraph"><p><code>microk8s</code> is native for Linux that&#8217;s why it particularly easy to get started on Linux machine (e.g. Ubuntu):</p></div><div class="ulist"><ul><li><p>Install</p></li></ul></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ sudo snap install microk8s --classic</code></pre></div></div><div class="ulist"><ul><li><p>Check the status</p></li></ul></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ sudo microk8s.status --wait-ready</code></pre></div></div><div class="paragraph"><p>You probably expected it will be hard to get Kubernetes locally&#8201;&#8212;&#8201;but believe it or not, you know have 1 node cluster up and running on your local machine. Congratulations!</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">If you are <code>MacOS</code> or <code>Windows</code> user, don&#8217;t get discouraged to try <code>microk8s</code>. <a href="https://microk8s.io/docs/install-alternatives" target="_blank" rel="noopener">Here</a> you can find instructions to get the tool in your hands.</td></tr></table></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content"><div class="paragraph"><p><code>microk8s</code> creates an admin group to enable seamless usage of commands. So you will have to add your current user to the group:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ sudo usermod -a -G microk8s $USER</code></pre></div></div><div class="paragraph"><p>Then, re-enter the session for the group update to take place:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ su - $USER</code></pre></div></div></td></tr></table></div></div></div><div class="sect1"><h2>2. Getting familiar</h2><div class="sectionbody"><div class="paragraph"><p>To have a minimum footprint <code>microk8s</code> is shipped with the most necessary Kubernetes components. However it provides easy way to enable/disable additional services ("addons"). Addons are preconfigured and most of the time work seamlessly out-of-the-box.</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content"><a href="https://microk8s.io/docs/addons#list" target="_blank" rel="noopener">Here</a> you can get a list of all supported addons.</td></tr></table></div><div class="paragraph"><p>To get familiar and show what is available at your disposal, I will show a few commands to inspect installed Kubernetes cluster. To dive deeper just checkout excellent <a href="https://microk8s.io/docs/" target="_blank" rel="noopener">documentation</a> that <code>microk8s</code> provides.</p></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content"><div class="paragraph"><p><code>microk8s</code> uses a namespaced <code>kubectl</code> command to prevent conflicts with any existing installs of kubectl. But, if you haven&#8217;t installed <code>kubectl</code> before, it is easy to add an alias (append to ~/.bash_aliases):</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ alias kubectl='microk8s.kubectl'</code></pre></div></div></td></tr></table></div><div class="sect2"><h3>2.1. Checking available nodes</h3><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ microk8s.kubectl get nodesNAME                        STATUS   ROLES    AGE    VERSION&lt;YOUR_LOCAL_MACHINE_NAME&gt;   Ready    &lt;none&gt;   198d   v1.17.2</code></pre></div></div><div class="paragraph"><p>No surprises here, it&#8217;s your local machine.</p></div></div><div class="sect2"><h3>2.2. Checking available services</h3><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ microk8s.kubectl get servicesNAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGEkubernetes   ClusterIP   10.152.183.1   &lt;none&gt;        443/TCP   198d</code></pre></div></div></div><div class="sect2"><h3>2.3. Checking available namespaces</h3><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ microk8s.kubectl get all --all-namespacesNAMESPACE            NAME                                                  READY   STATUS    RESTARTS   AGEcontainer-registry   pod/registry-6c99589dc-pmgzr                          1/1     Running   82         198dkube-system          pod/heapster-v1.5.2-844b564688-bf75b                  4/4     Running   455        198dkube-system          pod/hostpath-provisioner-58564cb894-dpt6r             1/1     Running   84         198dkube-system          pod/kubernetes-dashboard-7d75c474bb-8fhjk             1/1     Running   93         198dkube-system          pod/monitoring-influxdb-grafana-v4-6b6954958c-lsbw7   2/2     Running   190        198dNAMESPACE            NAME                           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)             AGEcontainer-registry   service/registry               NodePort    10.152.183.213   &lt;none&gt;        5000:32000/TCP      198ddefault              service/kubernetes             ClusterIP   10.152.183.1     &lt;none&gt;        443/TCP             198dkube-system          service/heapster               ClusterIP   10.152.183.100   &lt;none&gt;        80/TCP              198dkube-system          service/kubernetes-dashboard   ClusterIP   10.152.183.224   &lt;none&gt;        443/TCP             198dkube-system          service/monitoring-grafana     ClusterIP   10.152.183.102   &lt;none&gt;        80/TCP              198dkube-system          service/monitoring-influxdb    ClusterIP   10.152.183.87    &lt;none&gt;        8083/TCP,8086/TCP   198dNAMESPACE            NAME                                             READY   UP-TO-DATE   AVAILABLE   AGEcontainer-registry   deployment.apps/registry                         1/1     1            1           198dkube-system          deployment.apps/heapster-v1.5.2                  1/1     1            1           198dkube-system          deployment.apps/hostpath-provisioner             1/1     1            1           198dkube-system          deployment.apps/kubernetes-dashboard             1/1     1            1           198dkube-system          deployment.apps/monitoring-influxdb-grafana-v4   1/1     1            1           198dNAMESPACE            NAME                                                        DESIRED   CURRENT   READY   AGEcontainer-registry   replicaset.apps/registry-6c99589dc                          1         1         1       198dkube-system          replicaset.apps/heapster-v1.5.2-6b794f77c8                  0         0         0       198dkube-system          replicaset.apps/heapster-v1.5.2-6f5d55456                   0         0         0       198dkube-system          replicaset.apps/heapster-v1.5.2-844b564688                  1         1         1       198dkube-system          replicaset.apps/hostpath-provisioner-58564cb894             1         1         1       198dkube-system          replicaset.apps/kubernetes-dashboard-7d75c474bb             1         1         1       198dkube-system          replicaset.apps/monitoring-influxdb-grafana-v4-6b6954958c   1         1         1       198d</code></pre></div></div><div class="paragraph"><p>The command line is place where we live, but some people enjoy UI too.</p></div></div></div></div><div class="sect1"><h2>3. Dashboard addon</h2><div class="sectionbody"><div class="paragraph"><p>Most of the details can be found <a href="https://microk8s.io/docs/addon-dashboard" target="_blank" rel="noopener">here</a>. I will give the gist of the steps needed for the sake of completeness:</p></div><div class="ulist"><ul><li><p>Enable dashboard</p></li></ul></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ microk8s.enable dashboard</code></pre></div></div><div class="ulist"><ul><li><p>Get access token</p></li></ul></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ token=$(microk8s.kubectl -n kube-system get secret | grep default-token | cut -d " " -f1)$ microk8s.kubectl -n kube-system describe secret $token</code></pre></div></div><div class="ulist"><ul><li><p>Use port-forwarding, to access dashboard on your local machine</p></li></ul></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ microk8s.kubectl port-forward -n kube-system service/kubernetes-dashboard 10443:443Forwarding from 127.0.0.1:10443 -&gt; 8443Forwarding from [::1]:10443 -&gt; 8443</code></pre></div></div><div class="paragraph"><p>Voilà! Now you can enjoy Kubernetes dashboard!</p></div><div class="ulist"><ul><li><p>Enter <a href="https://localhost:10443/" class="bare" target="_blank" rel="noopener">https://localhost:10443/</a> in your browser</p></li><li><p>Login with <code>token</code> created previously</p></li></ul></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/microk8s/dashboard-login.png"><img src="/images/microk8s/dashboard-login.png" alt="dashboard login"></a></div></div></div></div><div class="ulist"><ul><li><p>Check-out namespaces / overview</p></li></ul></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/microk8s/dashboard-namespaces.png"><img src="/images/microk8s/dashboard-namespaces.png" alt="dashboard namespaces"></a></div></div></div></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/microk8s/dashboard-overview.png"><img src="/images/microk8s/dashboard-overview.png" alt="dashboard overview"></a></div></div></div></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content"><div class="paragraph"><p>Last tip for today&#8201;&#8212;&#8201;<code>microk8s</code> will continue running until you decide to stop it.</p></div><div class="paragraph"><p>Occasionally it might give you nasty port conflicts, so here is command to stop <code>microk8s</code>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ microk8s.stop</code></pre></div></div><div class="paragraph"><p>To start it again:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ microk8s.start</code></pre></div></div></td></tr></table></div></div></div><div class="sect1"><h2>4. Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>That it for now. Good luck in your Kubernetes journey!</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;This post is not overwhelmed with any theoretical or practical reflections about Kubernetes. I will just share very easy way of installing and getting started with Kubernetes in the matter of minutes.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;So, let&amp;#8217;s not waste our time and get Kubernetes cluster up and running locally.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Kubernetes" scheme="https://www.zghurskyi.com/categories/kubernetes/"/>
    
      <category term="microk8s" scheme="https://www.zghurskyi.com/categories/kubernetes/microk8s/"/>
    
    
      <category term="Kubernetes" scheme="https://www.zghurskyi.com/tags/kubernetes/"/>
    
      <category term="microk8s" scheme="https://www.zghurskyi.com/tags/microk8s/"/>
    
  </entry>
  
  <entry>
    <title>Maven: Packaging to multiple Java versions</title>
    <link href="https://www.zghurskyi.com/maven-package-to-multiple-java-versions/"/>
    <id>https://www.zghurskyi.com/maven-package-to-multiple-java-versions/</id>
    <published>2019-11-22T22:13:54.000Z</published>
    <updated>2019-11-22T22:13:54.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>In this post I will show how to package Java sources to multiple JDK versions with Maven.</p></div><a id="more"></a><div class="sect1"><h2>1. Sample source</h2><div class="sectionbody"><div class="paragraph"><p>As the example we will use Feign client (complete project can be found <a href="https://github.com/zghurskyi/investigations/tree/master/investigation-multiple-jdk-versions" target="_blank" rel="noopener">here</a>)</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package io.zghurskyi;import lombok.AllArgsConstructor;import lombok.Data;import org.springframework.cloud.openfeign.FeignClient;import org.springframework.http.MediaType;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;@FeignClient(name = "greetings-client", path = "/")public interface GreetingsClient {    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)    CreateGreetingResponse createGreeting(@RequestBody CreateGreetingRequest request);    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)    GetGreetingResponse getGreeting(GetGreetingRequest request);    @Data    @AllArgsConstructor    class CreateGreetingRequest {        private String name;        private String greeting;    }    @Data    @AllArgsConstructor    class GetGreetingRequest {        private Long id;    }    @Data    @AllArgsConstructor    class CreateGreetingResponse {        private long id;    }    @Data    @AllArgsConstructor    class GetGreetingResponse {        private String name;        private String greeting;    }}</code></pre></div></div></div></div><div class="sect1"><h2>2. Maven configuration</h2><div class="sectionbody"><div class="sect2"><h3>2.1. Compiler plugin</h3><div class="paragraph"><p><a href="https://maven.apache.org/plugins/maven-compiler-plugin/index.html" target="_blank" rel="noopener">The Compiler Plugin</a> is used to compile the sources of your project.</p></div><div class="paragraph"><p>Sometimes when you may need to compile a certain project to a different version than what you are currently using. The javac can accept such command using <code>-source</code> and <code>-target</code>. The Compiler Plugin can also be configured to provide these options during compilation.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;plugin&gt;    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;    &lt;version&gt;3.8.1&lt;/version&gt;    &lt;executions&gt;                                                                            <i class="conum" data-value="1"></i><b>(1)</b>        &lt;execution&gt;            &lt;id&gt;compile-jdk8&lt;/id&gt;                                                           <i class="conum" data-value="2"></i><b>(2)</b>            &lt;goals&gt;                &lt;goal&gt;compile&lt;/goal&gt;                                                        <i class="conum" data-value="3"></i><b>(3)</b>            &lt;/goals&gt;            &lt;configuration&gt;                &lt;source&gt;8&lt;/source&gt;                                                          <i class="conum" data-value="4"></i><b>(4)</b>                &lt;target&gt;8&lt;/target&gt;                                                          <i class="conum" data-value="5"></i><b>(5)</b>                &lt;fork&gt;true&lt;/fork&gt;                                                           <i class="conum" data-value="6"></i><b>(6)</b>                &lt;outputDirectory&gt;${project.build.outputDirectory}_jdk8&lt;/outputDirectory&gt;    <i class="conum" data-value="7"></i><b>(7)</b>            &lt;/configuration&gt;        &lt;/execution&gt;        &lt;execution&gt;            &lt;id&gt;compile-jdk11&lt;/id&gt;            &lt;goals&gt;                &lt;goal&gt;compile&lt;/goal&gt;            &lt;/goals&gt;            &lt;configuration&gt;                &lt;source&gt;8&lt;/source&gt;                &lt;target&gt;11&lt;/target&gt;                &lt;fork&gt;true&lt;/fork                &lt;outputDirectory&gt;${project.build.outputDirectory}_jdk11&lt;/outputDirectory&gt;            &lt;/configuration&gt;        &lt;/execution&gt;    &lt;/executions&gt;&lt;/plugin&gt;</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>Multiple specifications of a set of goals to execute during the build lifecycle, each having (possibly) different configuration.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>The identifier of this execution for labelling the goals during the build, and for matching exections to merge during inheritance.</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>The goals to execute with the given configuration.</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td>The <code>-source</code> argument for the Java compiler.</td></tr><tr><td><i class="conum" data-value="5"></i><b>5</b></td><td>The <code>-target</code> argument for the Java compiler.</td></tr><tr><td><i class="conum" data-value="6"></i><b>6</b></td><td>Allows running the compiler in a separate process. If <code>false</code> it uses the built in compiler, while if <code>true</code> it will use an executable.</td></tr><tr><td><i class="conum" data-value="7"></i><b>7</b></td><td>The directory for compiled classes.</td></tr></table></div></div><div class="sect2"><h3>2.2. Jar plugin</h3><div class="paragraph"><p><a href="https://maven.apache.org/plugins/maven-jar-plugin/index.html" target="_blank" rel="noopener">This plugin</a> provides the capability to build jars.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;plugin&gt;    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;    &lt;version&gt;3.1.2&lt;/version&gt;    &lt;executions&gt;        &lt;execution&gt;            &lt;id&gt;jar-jdk8&lt;/id&gt;            &lt;goals&gt;                &lt;goal&gt;jar&lt;/goal&gt;            &lt;/goals&gt;            &lt;configuration&gt;                &lt;classifier&gt;jdk8&lt;/classifier&gt;                                               <i class="conum" data-value="1"></i><b>(1)</b>                &lt;classesDirectory&gt;${project.build.outputDirectory}_jdk8&lt;/classesDirectory&gt;  <i class="conum" data-value="2"></i><b>(2)</b>            &lt;/configuration&gt;        &lt;/execution&gt;        &lt;execution&gt;            &lt;id&gt;jar-jdk11&lt;/id&gt;            &lt;goals&gt;                &lt;goal&gt;jar&lt;/goal&gt;            &lt;/goals&gt;            &lt;configuration&gt;                &lt;classifier&gt;jdk11&lt;/classifier&gt;                &lt;classesDirectory&gt;${project.build.outputDirectory}_jdk11&lt;/classesDirectory&gt;            &lt;/configuration&gt;        &lt;/execution&gt;    &lt;/executions&gt;&lt;/plugin&gt;</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>Classifier to add to the artifact generated. If given, the artifact will be attached as a supplemental artifact. If not given this will create the main artifact which is the default behavior. If you try to do that a second time without using a classifier the build will fail.</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>Directory containing the classes and resource files that should be packaged into the JAR.</td></tr></table></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content"><div class="paragraph"><p><strong>Using classifier to reference different JDK dependencies</strong></p></div><div class="paragraph"><p>Classifiers are the additional text given to describe an artifact.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell hljs" data-lang="shell">investigation-multiple-jdk-versions-0.0.1-SNAPSHOT-jdk11.jarinvestigation-multiple-jdk-versions-0.0.1-SNAPSHOT-jdk8.jar</code></pre></div></div><div class="paragraph"><p>From the above artifact names, classifiers can be located between the version and extension name of the artifact.</p></div><div class="ulist"><ul><li><p><code>jdk8</code> is used to describe that the artifact contains JDK 1.8 classes.</p></li><li><p><code>jdk11</code> is used to describe that the artifact contains JDK 11 classes.</p></li></ul></div><div class="paragraph"><p>Finally, use <code>classifier</code> in dependency declaration to specify which version you want to use:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;dependency&gt;    &lt;groupId&gt;io.zghurskyi&lt;/groupId&gt;    &lt;artifactId&gt;investigation-multiple-jdk-versions&lt;/artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;classifier&gt;jdk8&lt;/classifier&gt;&lt;/dependency&gt;</code></pre></div></div></td></tr></table></div></div></div></div><div class="sect1"><h2>3. Checking .class files version</h2><div class="sectionbody"><div class="paragraph"><p>After packaging with <code>mvn clean package</code> let&#8217;s check .class bytecode version:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell hljs" data-lang="shell">$ javap -verbose -cp target/investigation-multiple-jdk-versions-0.0.1-SNAPSHOT-jdk8.jar io.zghurskyi.GreetingsClient | grep "major version"  major version: 52$ javap -verbose -cp target/investigation-multiple-jdk-versions-0.0.1-SNAPSHOT-jdk11.jar io.zghurskyi.GreetingsClient | grep "major version"  major version: 55</code></pre></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;In this post I will show how to package Java sources to multiple JDK versions with Maven.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Maven" scheme="https://www.zghurskyi.com/categories/maven/"/>
    
      <category term="Java 8" scheme="https://www.zghurskyi.com/categories/maven/java-8/"/>
    
      <category term="Java 11" scheme="https://www.zghurskyi.com/categories/maven/java-8/java-11/"/>
    
    
      <category term="Maven" scheme="https://www.zghurskyi.com/tags/maven/"/>
    
      <category term="Java 8" scheme="https://www.zghurskyi.com/tags/java-8/"/>
    
      <category term="Java 11" scheme="https://www.zghurskyi.com/tags/java-11/"/>
    
  </entry>
  
  <entry>
    <title>JShell: Awesome Java REPL</title>
    <link href="https://www.zghurskyi.com/java-repl/"/>
    <id>https://www.zghurskyi.com/java-repl/</id>
    <published>2019-11-02T22:28:54.000Z</published>
    <updated>2019-11-02T22:28:54.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>In this post I provide a tutorial on using awesome <code>jshell</code> tool.</p></div><a id="more"></a><div class="sect1"><h2>1. Motivation</h2><div class="sectionbody"><div class="paragraph"><p>There are many times, when you just want to try out some code snippet in Java. For example, you want to experiment with new constructs available in recent Java versions, something like <code>var</code>.</p></div><div class="paragraph"><p>For a long time, to do this you had to follow <code>Write-Compile-Execute Loop</code>:</p></div><div class="ulist"><ul><li><p>write the Java program (of course with <code>public static void main(String&#8230;&#8203; args)</code>)</p></li><li><p>compile written code with <code>javac</code> (and potentially fix compile-time errors)</p></li><li><p>execute compiled byte-code with <code>java</code> (and potentially fix run-time exceptions)</p></li><li><p>edit written program and repeat the process</p></li></ul></div><div class="paragraph"><p>The frustrating thing here is delay between the time you start writing code and the time you actually got the feedback from Java compiler/runtime. However, now we have a tool, that finally removes unnecessary hustle. Please, meet <code>jshell</code>!</p></div><div class="paragraph"><p><code>jshell</code> significantly shortens the feedback loop&#8201;&#8212;&#8201;thus increasing your productivity. The boost is achieved by eliminating the need to switch back and forth between your editor/IDE and shell, since you write Java code in the dedicated shell (hence the name, <code>jshell</code>). More precisely, <code>jshell</code> implements <code>Read-Evaluate-Print Loop</code>:</p></div><div class="ulist"><ul><li><p>reads the code from command line</p></li><li><p>evaluates the given snippet</p></li><li><p>prints the result back to you</p></li></ul></div><div class="paragraph"><p>If you think about it&#8201;&#8212;&#8201;this is pretty awesome!</p></div><div class="paragraph"><p>Hopefully at this point you&#8217;re eager to play with <code>jshell</code>, so, without further ado&#8201;&#8212;&#8201;let&#8217;s start.</p></div></div></div><div class="sect1"><h2>2. Starting / exiting <code>jshell</code></h2><div class="sectionbody"><div class="ulist"><ul><li><p>Using JDK 9+</p></li></ul></div><div class="paragraph"><p><code>jshell</code> is available on JDK 9+ and above. So, if you have one of the recent Java versions available in the <code>$PATH</code>, then all you need to do is simply launch <code>jshell</code>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ jshell -v|  Welcome to JShell -- Version 11.0.4|  For an introduction type: /help introjshell&gt; /exit|  Goodbye</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content"><code>-v</code> flag&#8201;&#8212;&#8201;enables verbose feedback mode, that gives you a log of comments from <code>jshell</code>.</td></tr></table></div><div class="ulist"><ul><li><p>Using Docker</p></li></ul></div><div class="paragraph"><p>If you want to experiment with most recent features of Java in clean and safe playground&#8201;&#8212;&#8201;then just use Docker:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ docker run --rm -it adoptopenjdk/openjdk13 jshell -vNov 03, 2019 12:08:49 AM java.util.prefs.FileSystemPreferences$1 runINFO: Created user preferences directory.|  Welcome to JShell -- Version 13|  For an introduction type: /help introjshell&gt; /exit|  Goodbye</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content"><code>/exit</code>&#8201;&#8212;&#8201;quites <code>jshell</code>.</td></tr></table></div></div></div><div class="sect1"><h2>3. Snippets</h2><div class="sectionbody"><div class="paragraph"><p>As already mentioned, the <code>jshell</code> tool allows you to execute Java code, getting immediate results. You can enter:</p></div><div class="ulist"><ul><li><p>Java definition (variable, method, class, etc), like: <code>int x = 8</code></p></li><li><p>Java expression, like: <code>x + x</code></p></li><li><p>Java statement or import, like: <code>import java.time.*</code></p></li></ul></div><div class="paragraph"><p>These little chunks of Java code are called <code>snippets</code>.</p></div><div class="paragraph"><p>Let&#8217;s try write a few snippets to get familiar:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">jshell&gt; 1 + 1$1 ==&gt; 2|  created scratch variable $1 : intjshell&gt; int n = 1 + 1n ==&gt; 2|  created variable n : intjshell&gt; String hello(String g) {   ...&gt;   return "hello " + g;   ...&gt; }|  created method hello(String)jshell&gt; String hello(String name) {   ...&gt;   return "Hi " + name + "!";   ...&gt; }|  modified method hello(String)|    update overwrote method hello(String) <i class="conum" data-value="1"></i><b>(1)</b>jshell&gt; hello("Alina")$5 ==&gt; "Hi Alina!"|  created scratch variable $5 : Stringjshell&gt; String nn ==&gt; null|  replaced variable n : String|    update overwrote variable n : int <i class="conum" data-value="2"></i><b>(2)</b>jshell&gt; double volume(double radius) {   ...&gt;   return 4.0 / 3.0 * PI * cube(radius); <i class="conum" data-value="3"></i><b>(3)</b>   ...&gt; }|  created method volume(double), however, it cannot be invoked until variable PI, and method cube(double) are declaredjshell&gt; double PI = 3.14159jshell&gt; volume(1)|  attempted to call method volume(double) which cannot be invoked until method cube(double) is declaredjshell&gt; double cube(double a) { return a * a * a; }jshell&gt; volume(1)$11 ==&gt; 4.188786666666666jshell&gt; int divide(int a, int b) {   ...&gt;   return a / b;   ...&gt; }jshell&gt; divide(1, 0)|  Exception java.lang.ArithmeticException: / by zero|        at divide (#12:2) <i class="conum" data-value="4"></i><b>(4)</b>|        at (#13:1)jshell&gt; /list <i class="conum" data-value="5"></i><b>(5)</b>   1 : 1 + 1   4 : String hello(String name) {         return "Hi " + name + "!";       }   5 : hello("Alina")   6 : String n;   7 : double volume(double radius) {         return 4.0 / 3.0 * PI * cube(radius);       }   8 : double PI = 3.14159;   9 : volume(1)  10 : double cube(double a) { return a * a * a; }  11 : volume(1)  12 : int divide(int a, int b) {         return a / b;       }  13 : divide(1, 0)</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>overwrite existing variable/method/class definition</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>overwrite existing variable/method/class definition using incompatible type</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>forward reference variables/methods/classes, that are not yet defined</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td><code>#id:line-number</code> snippet id and line number withing a snippet, that caused an exception</td></tr><tr><td><i class="conum" data-value="5"></i><b>5</b></td><td><code>/list</code> command to trace back the source of exception</td></tr></table></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content"><div class="paragraph"><p>Verbose mode gives a lot of commentary, that might be useful, when you just start learning about <code>jshell</code>. When you gained enough experience, just change the feedback level:</p></div><div class="paragraph"><p><code>/set feedback</code>&#8201;&#8212;&#8201;displays the current mode and available modes</p></div><div class="paragraph"><p><code>/set feedback concise</code>&#8201;&#8212;&#8201;for terse commentary</p></div><div class="paragraph"><p><code>/set feedback normal</code>&#8201;&#8212;&#8201;for normal commentary</p></div><div class="paragraph"><p><code>/set feedback silent</code>&#8201;&#8212;&#8201;disables all feedback except errors</p></div></td></tr></table></div><div class="paragraph"><p><code>jshell</code> supports auto-completion with <code>&lt;Tab&gt;</code> key:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">jshell&gt; "hello". [Tab] <i class="conum" data-value="1"></i><b>(1)</b>charAt(                chars()                codePointAt(codePointBefore(       codePointCount(        codePoints()compareTo(             compareToIgnoreCase(   concat(contains(              contentEquals(         describeConstable()endsWith(              equals(                equalsIgnoreCase(formatted(             getBytes(              getChars(getClass()             hashCode()             indent(indexOf(               intern()               isBlank()isEmpty()              lastIndexOf(           length()lines()                matches(               notify()notifyAll()            offsetByCodePoints(    regionMatches(repeat(                replace(               replaceAll(replaceFirst(          resolveConstantDesc(   split(startsWith(            strip()                stripIndent()stripLeading()         stripTrailing()        subSequence(substring(             toCharArray()          toLowerCase(toString()             toUpperCase(           transform(translateEscapes()     trim()                 wait(jshell&gt; "hello".startsWith( [Tab+Tab] <i class="conum" data-value="2"></i><b>(2)</b>jshell&gt; "hello".startsWith("h") [Shift+Tab v] <i class="conum" data-value="3"></i><b>(3)</b>jshell&gt; boolean _ = "hello".startsWith("h") <i class="conum" data-value="4"></i><b>(4)</b></code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>press <kbd>Tab</kbd> key to auto-complete</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>press <kbd>Tab</kbd> two times to show text documentation</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>press <span class="keyseq"><kbd>Shift</kbd>+<kbd>Tab</kbd>+<kbd>v</kbd></span> to declare the variable with already entered value</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td>after pressing <span class="keyseq"><kbd>Shift</kbd>+<kbd>Tab</kbd>+<kbd>v</kbd></span>, the cursor is placed in the line, where you need to enter variable name</td></tr></table></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content"><div class="paragraph"><p><code>/help shortcuts</code>&#8201;&#8212;&#8201;displays information about available shortcuts</p></div><div class="paragraph"><p><span class="keyseq"><kbd>Shift</kbd>+<kbd>Tab</kbd></span> then <kbd>v</kbd>&#8201;&#8212;&#8201;the expression will be converted to a variable declaration</p></div><div class="paragraph"><p><span class="keyseq"><kbd>Shift</kbd>+<kbd>Tab</kbd></span> then <kbd>m</kbd>&#8201;&#8212;&#8201;the expression or statement will be converted to a method declaration</p></div><div class="paragraph"><p><span class="keyseq"><kbd>Shift</kbd>+<kbd>Tab</kbd></span> then <kbd>i</kbd>&#8201;&#8212;&#8201;propose possible imports</p></div></td></tr></table></div></div></div><div class="sect1"><h2>4. Commands</h2><div class="sectionbody"><div class="paragraph"><p><code>jshell</code> commands control the environment and display information.</p></div><div class="paragraph"><p>Command are distinguished from snippets by a leading forward slash <code>/</code>.</p></div><div class="paragraph"><p>Probably, the most useful is <code>/help</code> command&#8201;&#8212;&#8201;it shows a list of available commands. Also, it allows to dig dipper into specific command. For example:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">jshell&gt; /help /var||                                   /vars|                                   =====||  List the type, name, and value of variables that were entered.||  /vars|  List the type, name, and value of the current active variables||  /vars &lt;name&gt;|  List variables with the specified name (preference for active variables)||  /vars &lt;id&gt;|  List the variable with the specified snippet ID.|  One or more IDs or ID ranges may used, see '/help id'||  /vars -start|  List the variables in the evaluated startup snippets||  /vars -all|  List all variables including failed, overwritten, dropped, and startup</code></pre></div></div><div class="paragraph"><p><code>jshell</code> has a default startup script that is silently and automatically executed before start, so that you can get to work quickly. Entries from the startup script aren&#8217;t listed unless you request them with the <code>/list -start</code> or <code>/list -all</code> command:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">jshell&gt; /list -all  s1 : import java.io.*;  s2 : import java.math.*;  s3 : import java.net.*;  s4 : import java.nio.file.*;  s5 : import java.util.*;  s6 : import java.util.concurrent.*;  s7 : import java.util.function.*;  s8 : import java.util.prefs.*;  s9 : import java.util.regex.*; s10 : import java.util.stream.*;</code></pre></div></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content"><div class="paragraph"><p>The default startup script consists of several common imports.</p></div><div class="paragraph"><p><code>/set start</code> command, can be used to personalize your startup entries (for more details, use <code>/help /set start</code>).</p></div><div class="paragraph"><p><code>/save -start</code> command saves personalized startup script.</p></div></td></tr></table></div><div class="paragraph"><p>Similar to snippet completion, when you enter commands and command options, use the <kbd>Tab</kbd> key to automatically complete the command or option.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">jshell&gt; //!          /?          /drop       /edit       /env        /exit/help       /history    /imports    /list       /methods    /open/reload     /reset      /save       /set        /types      /vars&lt;press tab again to see synopsis&gt;</code></pre></div></div><div class="admonitionblock tip"><table><tr><td class="icon"><i class="fa icon-tip" title="Tip"></i></td><td class="content"><div class="paragraph"><p>Yet another useful way to get help, is to press <kbd>Tab</kbd> second time, to see synopsis for specific command:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">jshell&gt; /env -view or change the evaluation context&lt;press tab again to see full documentation&gt;</code></pre></div></div></td></tr></table></div><div class="paragraph"><p>Using <kbd>Tab</kbd> in a file argument position of the command shows the available files:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">jshell&gt; /open.dockerenv   /            bin/         boot/        dev/         etc/home/        lib/         lib64/       media/       mnt/         opt/proc/        root/        run/         sbin/        srv/         sys/tmp/         usr/         var/&lt;press tab again to see synopsis&gt;</code></pre></div></div><div class="paragraph"><p>Command (and command option) abbreviations are supported, <strong>as long as the abbreviation is unique</strong>.</p></div><div class="paragraph"><p>For example, the only command that begins with <code>/l</code> is <code>/list</code>, and the only <code>/list</code> option that begins with <code>-a</code> is <code>-all</code>. Therefore, you can use the following abbreviations to enter the <code>/list -all</code> command:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">jshell&gt; /l -a</code></pre></div></div></div></div><div class="sect1"><h2>5. Search</h2><div class="sectionbody"><div class="paragraph"><p>By pressing <kbd>up arrow</kbd> / <kbd>down arrow</kbd> you can navigate through the history of entered items.</p></div><div class="paragraph"><p>However, sometimes it&#8217;s pretty tedious to go through history one line at a time. So, to perform backward history search&#8201;&#8212;&#8201;use <span class="keyseq"><kbd>Ctrl</kbd>+<kbd>R</kbd></span>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">jshell&gt;bck-i-search: _</code></pre></div></div><div class="paragraph"><p>Now, you can enter keyword to search for (e.g. <code>class</code>&#8201;&#8212;&#8201;if you want to search for all previously defined classes). You can continue go further back history by repeatedly pressing <span class="keyseq"><kbd>Ctrl</kbd>+<kbd>R</kbd></span>. And if at some point you want to move the search forward towards the present&#8201;&#8212;&#8201;use <span class="keyseq"><kbd>Ctrl</kbd>+<kbd>S</kbd></span>.</p></div></div></div><div class="sect1"><h2>6. External editor</h2><div class="sectionbody"><div class="paragraph"><p>An alternative to editing at the command prompt is to use an external editor. This editor can be used to edit and create snippets, and is especially helpful for multiline snippets.</p></div><div class="paragraph"><p>To edit a specific snippet in an editor, use <code>/edit</code> command with snippet name or id. Use <code>/list</code> command to get snippet id.</p></div><div class="paragraph"><p>You can configure <code>jshell</code> to use the editor of your choice with the <code>/set editor</code> command:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">jshell&gt; /set editor vim|  Editor set to: vimjshell&gt; /edit</code></pre></div></div><div class="paragraph"><p>Now, you can define multi-line snippet in external editor, and after saving and closing editor, <code>jshell</code> prompt is restored:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">jshell&gt;</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content"><div class="paragraph"><p>If you don’t specify an editor, then the following environment variables are checked in order: JSHELLEDITOR, VISUAL, and EDITOR. If none of those are set, then a simple default editor is used.</p></div></td></tr></table></div></div></div><div class="sect1"><h2>7. Conclusion</h2><div class="sectionbody"><div class="paragraph"><p><code>jshell</code> doesn&#8217;t replace IDEs. The tool is there for you to learn and experiment with Java code.</p></div><div class="paragraph"><p><code>jshell</code> provides very convenient and safe playground. So, you can try different ideas and, after getting satisfactory results, just copy final code into your program editor or IDE.</p></div><div class="paragraph"><p>Overall, in my opinion, <code>jshell</code> significantly shortens the feedback loop&#8201;&#8212;&#8201;thus increasing your productivity. The boost is achieved by removing the need to switching back and forth between your editor/IDE and shell.</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;In this post I provide a tutorial on using awesome &lt;code&gt;jshell&lt;/code&gt; tool.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Java" scheme="https://www.zghurskyi.com/categories/java/"/>
    
      <category term="jshell" scheme="https://www.zghurskyi.com/categories/java/jshell/"/>
    
      <category term="Docker" scheme="https://www.zghurskyi.com/categories/java/jshell/docker/"/>
    
    
      <category term="Docker" scheme="https://www.zghurskyi.com/tags/docker/"/>
    
      <category term="Java" scheme="https://www.zghurskyi.com/tags/java/"/>
    
      <category term="jshell" scheme="https://www.zghurskyi.com/tags/jshell/"/>
    
  </entry>
  
  <entry>
    <title>Load testing with Gatling</title>
    <link href="https://www.zghurskyi.com/gatling-load-testing/"/>
    <id>https://www.zghurskyi.com/gatling-load-testing/</id>
    <published>2019-10-28T23:05:41.000Z</published>
    <updated>2019-10-28T23:05:41.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Sooner or later, there comes the time to measure how your RESTful service behaves under load. There are many out of the shelf tools, that allow to do this in "quick-and-dirty" way&#8201;&#8212;&#8201;like <a href="https://github.com/wg/wrk" target="_blank" rel="noopener">wrk</a> / <a href="https://github.com/giltene/wrk2" target="_blank" rel="noopener">wrk2</a>, <a href="https://httpd.apache.org/docs/2.4/programs/ab.html" target="_blank" rel="noopener">ab</a>, etc. However, if you&#8217;re working with JVM and want to setup reproducible and comprehensive load testing, probably, the best tool would be <a href="https://gatling.io/docs/3.3/" target="_blank" rel="noopener">Gatling</a>.</p></div><div class="paragraph"><p>So, this post is <code>how-to</code> article for setting up load testing of Spring Boot service with Gatling.</p></div><a id="more"></a><div class="sect1"><h2>1. What will we build ?</h2><div class="sectionbody"><div class="paragraph"><p>In this post we will do the following:</p></div><div class="olist arabic"><ol class="arabic"><li><p>Setup simple reactive web-service</p></li><li><p>Configure Gatling for our service under test</p></li><li><p>Write simple load testing scenario</p></li></ol></div><div class="paragraph"><p>Without further ado&#8201;&#8212;&#8201;let&#8217;s start!</p></div></div></div><div class="sect1"><h2>2. Service Under Test</h2><div class="sectionbody"><div class="paragraph"><p>We will perform load testing for simple <code>greetings</code> service, that allows:</p></div><div class="ulist"><ul><li><p>store greeting, and get back its id</p></li><li><p>get greeting by id</p></li></ul></div><div class="paragraph"><p>To make things interesting, we will use Spring reactive web stack.</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">The full service code can be found <a href="https://github.com/zghurskyi/investigations/tree/master/investigation-gatling" target="_blank" rel="noopener">here</a>. So, you can skip explanations below and go straight to <strong>Gatling configuration</strong> section.</td></tr></table></div><div class="exampleblock"><div class="content"><div class="paragraph"><p><strong>Bootstrapping</strong></p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell hljs" data-lang="shell">$ curl https://start.spring.io/starter.zip \-d dependencies=webflux,lombok,actuator \-d type=maven-project \-d baseDir=greetings \-d groupId=com.oxymorus.greetings \-d artifactId=greetings \-d bootVersion=2.1.9.RELEASE \-o service.zip$ unzip service.zip &amp;&amp; rm service.zip &amp;&amp; cd service</code></pre></div></div><div class="paragraph"><p><strong>Domain model</strong></p></div><div class="paragraph"><p>For our service, we will use simple domain class&#8201;&#8212;&#8201;<code>Greeting</code>.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.oxymorus.greeting.domain;import lombok.Value;@Valuepublic class Greeting {    public static final Greeting DEFAULT = new Greeting("&lt;undefined&gt;", "&lt;undefined&gt;");    private String name;    private String greeting;}</code></pre></div></div><div class="paragraph"><p><strong>Controller</strong></p></div><div class="paragraph"><p>To implement the requirements, we will expose 2 endpoints:</p></div><div class="ulist"><ul><li><p><code>POST /greetings</code> endpoint&#8201;&#8212;&#8201;to create greeting</p></li><li><p><code>GET /greetings</code> endpoint&#8201;&#8212;&#8201;to fetch greeting by <code>id</code></p></li></ul></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.oxymorus.greeting.api;import com.oxymorus.greeting.api.model.CreateGreetingRequest;import com.oxymorus.greeting.api.model.CreateGreetingResponse;import com.oxymorus.greeting.api.model.GetGreetingRequest;import com.oxymorus.greeting.api.model.GetGreetingResponse;import com.oxymorus.greeting.service.GreetingService;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.http.MediaType;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import reactor.core.publisher.Mono;@Slf4j@RequiredArgsConstructor@RestController@RequestMapping("/greetings")public class GreetingController {    private final GreetingService service;    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)    Mono&lt;CreateGreetingResponse&gt; createGreeting(@RequestBody CreateGreetingRequest request) {        return service.createGreeting(request.getName(), request.getGreeting())                .map(CreateGreetingResponse::new)                .doOnSubscribe(subscription -&gt; log.info("Create greeting '{}'", request));    }    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)    Mono&lt;GetGreetingResponse&gt; getGreeting(GetGreetingRequest request) {        return service.findGreeting(request.getId())                .map(greeting -&gt; new GetGreetingResponse(greeting.getName(), greeting.getGreeting()))                .doOnSubscribe(subscription -&gt; log.info("Get greeting by id '{}'", request.getId()));    }}</code></pre></div></div><div class="paragraph"><p><strong>Service</strong></p></div><div class="paragraph"><p>For our use-case, there is no need to setup complex persistence layer, so we just use in-memory storage:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.oxymorus.greeting.service;import com.oxymorus.greeting.domain.Greeting;import lombok.experimental.UtilityClass;import reactor.core.publisher.Mono;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;import java.util.concurrent.atomic.AtomicLong;public class DefaultGreetingService implements GreetingService {    private static final Map&lt;Long, Greeting&gt; GREETINGS_STORAGE = new ConcurrentHashMap&lt;&gt;();    @Override    public Mono&lt;Long&gt; createGreeting(String name, String greeting) {        return Mono.fromCallable(Generator::next)                .map(id -&gt; {                    GREETINGS_STORAGE.put(id, new Greeting(name, greeting));                    return id;                });    }    @Override    public Mono&lt;Greeting&gt; findGreeting(Long id) {        return Mono.fromCallable(() -&gt; GREETINGS_STORAGE.getOrDefault(id, Greeting.DEFAULT));    }    @UtilityClass    private static class Generator {        private static final AtomicLong id = new AtomicLong(0);        private static long next() {            return id.incrementAndGet();        }    }}</code></pre></div></div><div class="paragraph"><p><strong>Smoke Testing</strong></p></div><div class="paragraph"><p>Ok, now we have everything in place, so let&#8217;s issue a few requests:</p></div><div class="ulist"><ul><li><p>POST query:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ curl -X POST http://localhost:8080/greetings \-H "Content-Type: application/json" \-H "Accept: application/stream+json" \-d '{"name":"Alina", "greeting":"Hola senorita. Como esta?"}'</code></pre></div></div><div class="paragraph"><p>Response:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">{"id":1}</code></pre></div></div></li><li><p>GET query:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ curl -X GET http://localhost:8080/greetings?id=1</code></pre></div></div><div class="paragraph"><p>Response:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">{"name":"Alina", "greeting":"Hola senorita. Como esta?"}</code></pre></div></div></li></ul></div></div></div></div></div><div class="sect1"><h2>3. Gatling configuration</h2><div class="sectionbody"><div class="paragraph"><p>Gatling is written in Scala and provides pretty convenient DSL for describing load test scenarios.</p></div><div class="paragraph"><p>So, to enable it for our service we need to configure Scala:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;build&gt;    &lt;testSourceDirectory&gt;src/test/scala&lt;/testSourceDirectory&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;net.alchim31.maven&lt;/groupId&gt;            &lt;artifactId&gt;scala-maven-plugin&lt;/artifactId&gt;            &lt;version&gt;${scala-maven-plugin.version}&lt;/version&gt;            &lt;executions&gt;                &lt;execution&gt;                    &lt;goals&gt;                        &lt;goal&gt;testCompile&lt;/goal&gt;                    &lt;/goals&gt;                    &lt;configuration&gt;                        &lt;jvmArgs&gt;                            &lt;jvmArg&gt;-Xss100M&lt;/jvmArg&gt;                        &lt;/jvmArgs&gt;                        &lt;args&gt;                            &lt;arg&gt;-target:jvm-1.8&lt;/arg&gt;                            &lt;arg&gt;-deprecation&lt;/arg&gt;                            &lt;arg&gt;-feature&lt;/arg&gt;                            &lt;arg&gt;-unchecked&lt;/arg&gt;                            &lt;arg&gt;-language:implicitConversions&lt;/arg&gt;                            &lt;arg&gt;-language:postfixOps&lt;/arg&gt;                        &lt;/args&gt;                    &lt;/configuration&gt;                &lt;/execution&gt;            &lt;/executions&gt;        &lt;/plugin&gt;        &lt;plugin&gt;            &lt;groupId&gt;io.gatling&lt;/groupId&gt;            &lt;artifactId&gt;gatling-maven-plugin&lt;/artifactId&gt;            &lt;version&gt;${gatling-plugin.version}&lt;/version&gt;            &lt;executions&gt;                &lt;execution&gt;                    &lt;goals&gt;                        &lt;goal&gt;test&lt;/goal&gt;                    &lt;/goals&gt;                &lt;/execution&gt;            &lt;/executions&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre></div></div><div class="paragraph"><p>Also, we need to add Gatling dependency itself:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;dependency&gt;    &lt;groupId&gt;io.gatling.highcharts&lt;/groupId&gt;    &lt;artifactId&gt;gatling-charts-highcharts&lt;/artifactId&gt;    &lt;version&gt;${gatling.version}&lt;/version&gt;    &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;</code></pre></div></div></div></div><div class="sect1"><h2>4. Load testing</h2><div class="sectionbody"><div class="paragraph"><p>Finally, after performing all configuration we are ready to write load test:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">import com.typesafe.config.ConfigFactoryimport io.gatling.core.Predef._import io.gatling.http.Predef._import scala.concurrent.duration._class LoadScript extends Simulation {  val config = ConfigFactory.load()  val baseUrl = config.getString("baseUrl")  val dataFile = config.getString("dataFile")  val dataFeeder = ssv(dataFile).circular  val httpConfig = http    .baseUrl(baseUrl)    .contentTypeHeader("application/json")    .acceptHeader("application/json")    .shareConnections  val basicLoad = scenario("LOAD_TEST")    .feed(dataFeeder)    .exec(BasicLoad.start)  setUp(    basicLoad.inject(      rampConcurrentUsers(0) to (200) during (10 seconds),      constantConcurrentUsers(200) during (50 seconds)    ).protocols(httpConfig)  )}object BasicLoad {  val start =    exec(      http("Register greeting")        .post("/greetings")        .body(StringBody(          """            |{            |  "name": "${name}",            |  "greeting": "${greeting}"            |}            |""".stripMargin)).asJson        .check(status is 200)        .check(jsonPath("$.id").saveAs("id"))    )    .exec(      http("Get greeting by id")        .get("/greetings")        .queryParam("id", "${id}")        .check(status is 200)    )}</code></pre></div></div><div class="paragraph"><p>To run script, just execute:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ mvn gatling:test -Dgatling.skip=false -Dgatling.simulationClass=LoadScript</code></pre></div></div></div></div><div class="sect1"><h2>5. Debugging Load Script</h2><div class="sectionbody"><div class="paragraph"><p>When you write Gatling load tests, sooner or later you&#8217;ll need some facilities to debug and figure WTF is going on.</p></div><div class="paragraph"><p>There are several practical ways to figure out, if something goes wrong in your Gatlign script:</p></div><div class="ulist"><ul><li><p>Using good old <code>println</code> inside one of <code>exec</code> blocks:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">    .exec { session =&gt;      println(session)      session    }</code></pre></div></div></li><li><p>Using logger configuration:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-xml hljs" data-lang="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;configuration&gt;    &lt;appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender"&gt;        &lt;encoder&gt;            &lt;pattern&gt;%d{HH:mm:ss.SSS} [%-5level] %logger{15} - %msg%n%rEx&lt;/pattern&gt;        &lt;/encoder&gt;        &lt;immediateFlush&gt;false&lt;/immediateFlush&gt;    &lt;/appender&gt;    &lt;!-- uncomment and set to DEBUG to log all failing HTTP requests --&gt;    &lt;!-- uncomment and set to TRACE to log all HTTP requests --&gt;    &lt;logger name="io.gatling.http.engine.response" level="DEBUG" /&gt;    &lt;root level="WARN"&gt;        &lt;appender-ref ref="CONSOLE" /&gt;    &lt;/root&gt;&lt;/configuration&gt;</code></pre></div></div></li></ul></div></div></div><div class="sect1"><h2>6. Results</h2><div class="sectionbody"><div class="paragraph"><p>When script completes, we can see the results:</p></div><div class="ulist"><ul><li><p>In Gatling Maven plugin output:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">================================================================================---- Global Information --------------------------------------------------------&gt; request count                                     435202 (OK=435202 KO=0     )&gt; min response time                                      0 (OK=0      KO=-     )&gt; max response time                                    537 (OK=537    KO=-     )&gt; mean response time                                    49 (OK=49     KO=-     )&gt; std deviation                                         34 (OK=34     KO=-     )&gt; response time 50th percentile                         43 (OK=43     KO=-     )&gt; response time 75th percentile                         63 (OK=63     KO=-     )&gt; response time 95th percentile                        111 (OK=111    KO=-     )&gt; response time 99th percentile                        162 (OK=162    KO=-     )&gt; mean requests/sec                                7134.459 (OK=7134.459 KO=-     )---- Response Time Distribution ------------------------------------------------&gt; t &lt; 800 ms                                        435202 (100%)&gt; 800 ms &lt; t &lt; 1200 ms                                   0 (  0%)&gt; t &gt; 1200 ms                                            0 (  0%)&gt; failed                                                 0 (  0%)================================================================================Reports generated in 0s.Please open the following file: .../target/gatling/loadscript-20191030221405125/index.html</code></pre></div></div></li><li><p>In nicely prepared report:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ xdg-open target/gatling/loadscript*/index.html</code></pre></div></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/greetings_get.png"><img src="/images/greetings_get.png" alt="greetings get"></a></div></div></div></div></li></ul></div></div></div><div class="sect1"><h2>7. Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>In this post we learned, how to setup load testing of your service.</p></div><div class="paragraph"><p>If you followed along, probably, you noticed, that it may be daunting sometimes, but results are rewarding.</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Sooner or later, there comes the time to measure how your RESTful service behaves under load. There are many out of the shelf tools, that allow to do this in &quot;quick-and-dirty&quot; way&amp;#8201;&amp;#8212;&amp;#8201;like &lt;a href=&quot;https://github.com/wg/wrk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wrk&lt;/a&gt; / &lt;a href=&quot;https://github.com/giltene/wrk2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wrk2&lt;/a&gt;, &lt;a href=&quot;https://httpd.apache.org/docs/2.4/programs/ab.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ab&lt;/a&gt;, etc. However, if you&amp;#8217;re working with JVM and want to setup reproducible and comprehensive load testing, probably, the best tool would be &lt;a href=&quot;https://gatling.io/docs/3.3/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gatling&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;So, this post is &lt;code&gt;how-to&lt;/code&gt; article for setting up load testing of Spring Boot service with Gatling.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Gatling" scheme="https://www.zghurskyi.com/categories/gatling/"/>
    
      <category term="Maven" scheme="https://www.zghurskyi.com/categories/gatling/maven/"/>
    
      <category term="Load testing" scheme="https://www.zghurskyi.com/categories/gatling/maven/load-testing/"/>
    
      <category term="Spring Boot" scheme="https://www.zghurskyi.com/categories/gatling/maven/load-testing/spring-boot/"/>
    
    
      <category term="Maven" scheme="https://www.zghurskyi.com/tags/maven/"/>
    
      <category term="Spring Boot" scheme="https://www.zghurskyi.com/tags/spring-boot/"/>
    
      <category term="Gatling" scheme="https://www.zghurskyi.com/tags/gatling/"/>
    
      <category term="Load testing" scheme="https://www.zghurskyi.com/tags/load-testing/"/>
    
  </entry>
  
  <entry>
    <title>Different ways to implement Decorator Pattern</title>
    <link href="https://www.zghurskyi.com/decorator/"/>
    <id>https://www.zghurskyi.com/decorator/</id>
    <published>2019-10-23T23:34:41.000Z</published>
    <updated>2019-10-23T23:34:41.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>The <code>Decorator pattern</code> is handy tool in every developer toolbox. Probably, everyone occasionally uses this pattern and knows when and how to apply it. Nevertheless, in this post I will show how to implement decorator in functional style, and contrast it with object-oriented way.</p></div><a id="more"></a><div class="sect1"><h2>1. Why might you use <code>Decorator pattern</code> ?</h2><div class="sectionbody"><div class="paragraph"><p>Let&#8217;s start by highlighting the reasons <code>Decorator pattern</code> might be useful in your everyday programming practice.</p></div><div class="paragraph"><p>Shortly put, in Object-Oriented Design (OOD) <code>Decorator pattern</code> is used:</p></div><div class="olist arabic"><ol class="arabic"><li><p>To attach additional responsibilities to an object dynamically.</p><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">It enables fine granularity in distributing functionality between objects, which basically is very good example of applying <a href="https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html" target="_blank" rel="noopener">Single Responsibility Principle</a>.</td></tr></table></div></li><li><p>To extend behavior of an object, without changing collaborating objects.</p><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Decorator is one of the patterns, that demonstrates the <a href="https://blog.cleancoder.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html" target="_blank" rel="noopener">Open/Closed Principle</a> very clearly.</td></tr></table></div></li></ol></div></div></div><div class="sect1"><h2>2. Toy problem</h2><div class="sectionbody"><div class="paragraph"><p>To get better grasp of the pattern let&#8217;s use it for the following task:</p></div><div class="paragraph"><p>Imagine, that we’re required to develop a monthly net salary calculator, given gross annual salary, after applying series of taxes.</p></div><div class="paragraph"><p>Of course, the task is very simple, and one may argue, that we are over-engineering. However, this is deliberate decision made for demonstration purposes.</p></div></div></div><div class="sect1"><h2>3. Decorator in Object-Oriented Light</h2><div class="sectionbody"><div class="paragraph"><p>We will start by designing an interface for our calculator:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.oxymorus.decorator.object_oriented;public interface SalaryCalculator {    double calculate(double grossAnnual);}</code></pre></div></div><div class="paragraph"><p>The next step, is to implement default calculator, that just finds average monthly salary:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.oxymorus.decorator.object_oriented;public class DefaultSalaryCalculator implements SalaryCalculator {    @Override    public double calculate(double grossAnnual) {        return grossAnnual / 12;    }}</code></pre></div></div><div class="paragraph"><p>Then, following classical definition, we will introduce <code>AbstractTaxDecorator</code>, that will allow us to apply different taxes as decorations of <code>DefaultSalaryCalculator</code>.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.oxymorus.decorator.object_oriented;public abstract class AbstractTaxDecorator implements SalaryCalculator {    private final SalaryCalculator salaryCalculator;    public AbstractTaxDecorator(SalaryCalculator salaryCalculator) {        this.salaryCalculator = salaryCalculator;    }    protected abstract double applyTax(double salary);    @Override    public final double calculate(double gross) {        double salary = salaryCalculator.calculate(gross);        return applyTax(salary);    }}</code></pre></div></div><div class="paragraph"><p>Next, let&#8217;s add several tax decorators:</p></div><div class="ulist"><ul><li><p>Social security tax:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.oxymorus.decorator.object_oriented;public class SocialSecurityTaxDecorator extends AbstractTaxDecorator {    public SocialSecurityTaxDecorator(SalaryCalculator salaryCalculator) {        super(salaryCalculator);    }    @Override    protected double applyTax(double salary) {        return salary * 0.20;    }}</code></pre></div></div></li><li><p>Fixed tax:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.oxymorus.decorator.object_oriented;public class FixedTaxDecorator extends AbstractTaxDecorator {    public FixedTaxDecorator(SalaryCalculator salaryCalculator) {        super(salaryCalculator);    }    @Override    protected double applyTax(double salary) {        return salary - 100.0;    }}</code></pre></div></div></li></ul></div><div class="paragraph"><p>Finally, we can use everything together:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.oxymorus.decorator.object_oriented;public class Demo {    public static void main(String[] args) {        double netSalary = new FixedTaxDecorator(                new SocialSecurityTaxDecorator(                    new DefaultSalaryCalculator()                )        ).calculate(60000.00);    }}</code></pre></div></div><div class="paragraph"><p>Ok, this is well and good, let&#8217;s now take a look at a little bit different approach.</p></div></div></div><div class="sect1"><h2>4. Decorator in Functional Light</h2><div class="sectionbody"><div class="paragraph"><p>As with OOD approach, we will start with defining the calculator interface:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.oxymorus.decorator.functional;import java.util.Objects;@FunctionalInterfacepublic interface SalaryCalculator {    double calculate(double grossAnnual);    default SalaryCalculator andThen(SalaryCalculator after) {        Objects.requireNonNull(after);        return (double amount) -&gt; after.calculate(calculate(amount));    }}</code></pre></div></div><div class="paragraph"><p>As you already noticed, the interface differs a bit from object-oriented counterpart:</p></div><div class="ulist"><ul><li><p>we have added <code>andThen</code> method, that actually gives us ability to dynamically compose instances of <code>SalaryCalculator</code>.</p></li><li><p>moreover, <code>SalaryCalculator</code> is marked as <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html" target="_blank" rel="noopener">@FunctionalInterface</a>, which simply means that we&#8217;ll be able to use lambdas instead of decorator classes</p></li></ul></div><div class="paragraph"><p>We can leave <code>DefaultSalaryCalculator</code> without any changes. However, let&#8217;s define <code>Taxes</code> class, that encapsulates all possible taxes:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.oxymorus.decorator.functional;public final class Taxes {    private Taxes() {}    public static double socialSecurityTax(double salary) {        return salary * 0.20;    }    public static double fixedTax(double salary) {        return salary - 100;    }}</code></pre></div></div><div class="paragraph"><p>And, finally, let&#8217;s put everything together:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.oxymorus.decorator.functional;public class Demo {    public static void main(String[] args) {        double netSalary = new DefaultSalaryCalculator()                .andThen(Taxes::socialSecurityTax)                .andThen(Taxes::fixedTax)                .calculate(60000.00);    }}</code></pre></div></div></div></div><div class="sect1"><h2>5. Comparison and Results</h2><div class="sectionbody"><div class="paragraph"><p>Comparing two implementations, we can conclude:</p></div><div class="ulist"><ul><li><p>Both approaches solve the problem</p></li><li><p>Functional is far more concise</p></li><li><p>Object-Oriented is verbose and adds accidental complexity, but emphasizes Single Responsibility and Open/Closed Principles</p></li></ul></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;The &lt;code&gt;Decorator pattern&lt;/code&gt; is handy tool in every developer toolbox. Probably, everyone occasionally uses this pattern and knows when and how to apply it. Nevertheless, in this post I will show how to implement decorator in functional style, and contrast it with object-oriented way.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Decorator pattern" scheme="https://www.zghurskyi.com/categories/decorator-pattern/"/>
    
      <category term="Object-Oriented Design" scheme="https://www.zghurskyi.com/categories/decorator-pattern/object-oriented-design/"/>
    
      <category term="Functional style" scheme="https://www.zghurskyi.com/categories/decorator-pattern/object-oriented-design/functional-style/"/>
    
    
      <category term="Decorator pattern" scheme="https://www.zghurskyi.com/tags/decorator-pattern/"/>
    
      <category term="Object-Oriented Design" scheme="https://www.zghurskyi.com/tags/object-oriented-design/"/>
    
      <category term="Functional style" scheme="https://www.zghurskyi.com/tags/functional-style/"/>
    
  </entry>
  
  <entry>
    <title>Apache Camel: Masking sensitive information</title>
    <link href="https://www.zghurskyi.com/camel-masking-sensitive-information/"/>
    <id>https://www.zghurskyi.com/camel-masking-sensitive-information/</id>
    <published>2019-10-16T16:53:41.000Z</published>
    <updated>2019-10-16T16:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>It&#8217;s pretty common to log incoming requests or message bodies via <a href="https://camel.apache.org/components/latest/log-component.html" target="_blank" rel="noopener">Log component</a>. Usually, logging incoming data is harmless. However, sometime you may accidentally include secure/sensitive information. What to do in this case ?</p></div><a id="more"></a><div class="sect1"><h2>Masking sensitive information in Apache Camel</h2><div class="sectionbody"><div class="paragraph"><p>Apache Camel supports security masking for logging, when you set <code>logMask</code> flag to <code>true</code>. This feature is available starting from <a href="https://camel.apache.org/manual/latest/log-eip.html#_masking_sensitive_information_like_password" target="_blank" rel="noopener">Camel 2.19</a></p></div><div class="paragraph"><p>You can enable masking at <code>CamelContext</code> level and, also, at route level:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">// enable at CamelContext levelcamelContext.setLogMask(true);// enable at route levelfrom("direct:start").logMask()    .log("Processing ${id}")    .to("bean:foo");</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">By default, <a href="https://static.javadoc.io/org.apache.camel/camel-core/2.24.2/org/apache/camel/processor/DefaultMaskingFormatter.html" target="_blank" rel="noopener">DefaultMaskingFormatter</a> is used: this formatter searches specified keywords in the source and replaces its value with mask string (<code>xxxxx</code>). It&#8217;s important to note, that <code>DefaultMaskingFormatter</code> masks only <code>"passphrase"</code>, <code>"password"</code> and <code>"secretKey"</code> keywords. So, if you need to mask other keywords, you&#8217;ll have to make custom configuration.</td></tr></table></div></div></div><div class="sect1"><h2>Configuring custom masking formatter</h2><div class="sectionbody"><div class="paragraph"><p>If you want to use a custom masking formatter, you should put it into Camel service registry with the name <code>CamelCustomLogMask</code>. Note that your formatter must implement <a href="https://static.javadoc.io/org.apache.camel/camel-core/2.24.2/org/apache/camel/spi/MaskingFormatter.html" target="_blank" rel="noopener">MaskingFormatter</a>.</p></div><div class="paragraph"><p>However, if you&#8217;re using <a href="https://camel.apache.org/components/latest/spring-boot.html" target="_blank" rel="noopener">Spring Boot auto-configuration for Apache Camel</a>, it&#8217;s actually pretty easy to just configure <code>DefaultMaskingFormatter</code> with your custom masking keywords.</p></div><div class="paragraph"><p>For example, let&#8217;s enable masking of <code>value</code> keyword:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">@Beanpublic Registry maskingRegistry() {    MaskingFormatter valueMaskingFormatter =        new DefaultMaskingFormatter(                Collections.singleton("value"), <i class="conum" data-value="1"></i><b>(1)</b>                true,                           <i class="conum" data-value="2"></i><b>(2)</b>                true,                           <i class="conum" data-value="3"></i><b>(3)</b>                true                            <i class="conum" data-value="4"></i><b>(4)</b>        );    SimpleRegistry simpleRegistry = new SimpleRegistry();    simpleRegistry.put(Constants.CUSTOM_LOG_MASK_REF, valueMaskingFormatter);    return simpleRegistry;}</code></pre></div></div><div class="colist arabic"><table><tr><td><i class="conum" data-value="1"></i><b>1</b></td><td>set of <code>keywords</code>, that should be masked</td></tr><tr><td><i class="conum" data-value="2"></i><b>2</b></td><td>flag to turn on/off masking of key-value (e.g. in <a href="https://camel.apache.org/components/latest/properties-component.html" target="_blank" rel="noopener">properties component</a>)</td></tr><tr><td><i class="conum" data-value="3"></i><b>3</b></td><td>flag to turn on/off masking XML element</td></tr><tr><td><i class="conum" data-value="4"></i><b>4</b></td><td>flag to turn on/off masking JSON field</td></tr></table></div><div class="paragraph"><p>Also, to turn on <code>logMask</code> globally, you need to add following config to your <code>application.yml</code>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">camel:  springboot:    logMask: true</code></pre></div></div></div></div><div class="sect1"><h2>Talk is cheap. Show me the code.</h2><div class="sectionbody"><div class="paragraph"><p>You can find fully functioning example by following the <a href="https://github.com/zghurskyi/investigations/tree/master/investigation-camel-log-masking" target="_blank" rel="noopener">link</a>.</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;It&amp;#8217;s pretty common to log incoming requests or message bodies via &lt;a href=&quot;https://camel.apache.org/components/latest/log-component.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Log component&lt;/a&gt;. Usually, logging incoming data is harmless. However, sometime you may accidentally include secure/sensitive information. What to do in this case ?&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Apache Camel" scheme="https://www.zghurskyi.com/categories/apache-camel/"/>
    
      <category term="CamelCustomLogMask" scheme="https://www.zghurskyi.com/categories/apache-camel/camelcustomlogmask/"/>
    
      <category term="Password masking" scheme="https://www.zghurskyi.com/categories/apache-camel/camelcustomlogmask/password-masking/"/>
    
    
      <category term="Apache Camel" scheme="https://www.zghurskyi.com/tags/apache-camel/"/>
    
      <category term="CamelCustomLogMask" scheme="https://www.zghurskyi.com/tags/camelcustomlogmask/"/>
    
      <category term="Password masking" scheme="https://www.zghurskyi.com/tags/password-masking/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic Kafka routes with Apache Camel</title>
    <link href="https://www.zghurskyi.com/camel-dynamic-routes/"/>
    <id>https://www.zghurskyi.com/camel-dynamic-routes/</id>
    <published>2019-10-01T16:53:41.000Z</published>
    <updated>2020-02-23T12:54:41.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Suppose, you have a task to implement dynamic routes configuration with Apache Camel. Or more concretely, you want to create Camel routes without having to add new route definitions just by changing configuration.</p></div><div class="paragraph"><p>I recently encountered similar task, and as it turned out&#8201;&#8212;&#8201;there is a simple way to get things done . So, in this post I will share the solution.</p></div><a id="more"></a><div class="sect1"><h2>1. Motivation</h2><div class="sectionbody"><div class="paragraph"><p>First, let&#8217;s define what initial state is and what we want to build.</p></div><div class="paragraph"><p>Suppose we already have Spring Boot service, that uses Apache Camel for integration with other services and infrastructure. Specifically, the service produces messages to Apache Kafka.</p></div><div class="paragraph"><p>As a software engineers, we know that in our dynamic world there is only one constant&#8201;&#8212;&#8201;requirements to our software will change. So, we want to build the system that is easy to maintain and extend. In this concrete instance we are going to build integration with Kafka in such a way, that producing messages to new topics will not require changing sources (defining new routes), but simply translates to adding new configurations.</p></div></div></div><div class="sect1"><h2>2. Plan</h2><div class="sectionbody"><div class="paragraph"><p>Our approach will be the following:</p></div><div class="olist arabic"><ol class="arabic"><li><p>Define routes configuration</p></li><li><p>Read configuration on service startup</p></li><li><p>Build Camel routes, based on defined configurations</p></li><li><p>Add routes to Camel context</p></li></ol></div><div class="paragraph"><p>Basically, that&#8217;s it. As I already let out earlier&#8201;&#8212;&#8201;nothing really complex is needed to solve our task.</p></div></div></div><div class="sect1"><h2>3. Solution</h2><div class="sectionbody"><div class="paragraph"><p>For inpatient&#8201;&#8212;&#8201;<a href="https://github.com/zghurskyi/investigations/tree/master/investigation-camel-dynamic-routes" target="_blank" rel="noopener">here</a> is the link to the source code. For readers, that want to get more details.</p></div><div class="sect2"><h3>3.1. Define routes configuration</h3><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.oxymorus.configuration.properties;import lombok.Data;import javax.validation.Valid;import javax.validation.constraints.NotEmpty;import javax.validation.constraints.NotNull;import java.util.Map;@Datapublic class CamelKafkaProducerProperties {    @NotEmpty    private Map&lt;String, @Valid ProducerProperties&gt; producers;    @Data    public static class ProducerProperties {        @NotNull        private String brokers;        @NotNull        private String topic;        @NotNull        private String serializerClass = "org.apache.kafka.common.serialization.StringSerializer";        @NotNull        private String keySerializerClass = "org.apache.kafka.common.serialization.StringSerializer";        public String getUri() {            return "kafka:start" +                    "?brokers=" + brokers +                    "&amp;topic=" + topic +                    "&amp;serializerClass=" + serializerClass +                    "&amp;keySerializerClass=" + keySerializerClass;        }    }}</code></pre></div></div><div class="paragraph"><p>Also, don&#8217;t forget to actually define several producer properties:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-properties hljs" data-lang="properties">camel.kafka.producers.test0.brokers=localhost:9092camel.kafka.producers.test0.topic=test1camel.kafka.producers.test1.brokers=localhost:9092camel.kafka.producers.test1.topic=test2camel.kafka.producers.test2.brokers=localhost:9092camel.kafka.producers.test2.topic=test3</code></pre></div></div></div><div class="sect2"><h3>3.2. Build configured routes</h3><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.oxymorus.listener;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.apache.camel.CamelContext;import org.apache.camel.LoggingLevel;import org.apache.camel.builder.RouteBuilder;import static com.oxymorus.configuration.properties.CamelKafkaProducerProperties.ProducerProperties;@Slf4j@RequiredArgsConstructorpublic class CamelKafkaProducerRoutesBuilder extends RouteBuilder {    private final String key;    private final ProducerProperties producerProperties;    public CamelKafkaProducerRoutesBuilder(CamelContext context, String key, ProducerProperties producerProperties) {        super(context);        this.key = key;        this.producerProperties = producerProperties;    }    @Override    public void configure() throws Exception {        from("direct:producer-" + key)                .log(LoggingLevel.INFO, "Sending to Kafka: ${body}")                .to(producerProperties.getUri())                .log("Successfully sent ${body}");    }}</code></pre></div></div></div><div class="sect2"><h3>3.3. Initialize routes on service startup</h3><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.oxymorus.listener;import com.oxymorus.configuration.properties.CamelKafkaProducerProperties;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.apache.camel.CamelContext;import org.springframework.boot.context.event.ApplicationReadyEvent;import org.springframework.context.event.EventListener;import java.util.List;import java.util.stream.Collectors;@Slf4j@RequiredArgsConstructorpublic class CamelKafkaRoutesInitializingListener {    private final CamelKafkaProducerProperties producerProperties;    private final CamelContext camelContext;    @EventListener(ApplicationReadyEvent.class)    public void initializeRoutes() {        try {            log.info("Building Kafka producer routes: " + producerProperties);            List&lt;CamelKafkaProducerRoutesBuilder&gt; routesBuilders = producerRoutesBuilder();            for (CamelKafkaProducerRoutesBuilder routesBuilder : routesBuilders) {                camelContext.addRoutes(routesBuilder);            }        } catch (Exception exception) {            log.error("Failed to build dynamic routes: " + producerProperties, exception);        }    }    private List&lt;CamelKafkaProducerRoutesBuilder&gt; producerRoutesBuilder() {        return producerProperties.getProducers().entrySet().stream()                .map(e -&gt; new CamelKafkaProducerRoutesBuilder(camelContext, e.getKey(), e.getValue()))                .collect(Collectors.toList());    }}</code></pre></div></div></div></div></div><div class="sect1"><h2>4. Smoke Testing</h2><div class="sectionbody"><div class="paragraph"><p>As good people, we should test our software. But today I&#8217;m lazy and will do only manual testing.</p></div><div class="ulist"><ul><li><p>Start local kafka broker</p></li></ul></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ cd docker$ docker-compose up</code></pre></div></div><div class="ulist"><ul><li><p>Start console consumer</p></li></ul></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ docker run --tty --rm --interactive \              --network=host \              confluentinc/cp-kafkacat \              kafkacat -C -b localhost:9092 -t test1</code></pre></div></div><div class="ulist"><ul><li><p>Start the service</p></li></ul></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">$ mvn clean install$ mvn spring-boot:run</code></pre></div></div><div class="paragraph"><p>Or alternatively:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">$ java -jar target/investigation-camel-dynamic-routes-1.0-SNAPSHOT.jar</code></pre></div></div></div></div><div class="sect1"><h2>5. Conclusions</h2><div class="sectionbody"><div class="paragraph"><p>So, as turned out&#8201;&#8212;&#8201;it&#8217;s not a big deal to dynamically add routes to Apache Camel. In this post I described a way for Kafka producer routes, but nothing prevents you to use the same approach for any other Camel routes.</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Suppose, you have a task to implement dynamic routes configuration with Apache Camel. Or more concretely, you want to create Camel routes without having to add new route definitions just by changing configuration.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;I recently encountered similar task, and as it turned out&amp;#8201;&amp;#8212;&amp;#8201;there is a simple way to get things done . So, in this post I will share the solution.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Apache Camel" scheme="https://www.zghurskyi.com/categories/apache-camel/"/>
    
      <category term="Apache Kafka" scheme="https://www.zghurskyi.com/categories/apache-camel/apache-kafka/"/>
    
      <category term="Dynamic Routes" scheme="https://www.zghurskyi.com/categories/apache-camel/apache-kafka/dynamic-routes/"/>
    
      <category term="Spring Boot" scheme="https://www.zghurskyi.com/categories/apache-camel/apache-kafka/dynamic-routes/spring-boot/"/>
    
    
      <category term="Apache Camel" scheme="https://www.zghurskyi.com/tags/apache-camel/"/>
    
      <category term="Apache Kafka" scheme="https://www.zghurskyi.com/tags/apache-kafka/"/>
    
      <category term="Dynamic Routes" scheme="https://www.zghurskyi.com/tags/dynamic-routes/"/>
    
      <category term="Spring Boot" scheme="https://www.zghurskyi.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Java concurrency tools</title>
    <link href="https://www.zghurskyi.com/concurrent-sum-of-numbers/"/>
    <id>https://www.zghurskyi.com/concurrent-sum-of-numbers/</id>
    <published>2019-09-27T12:07:41.000Z</published>
    <updated>2019-10-07T12:07:41.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>In the post I will give practical comparison of using different Java classes for implementing the same toy problem: finding sum of integers in given range.</p></div><a id="more"></a><div class="sect1"><h2>1. Toy problem</h2><div class="sectionbody"><div class="paragraph"><p>Suppose we want to calculate the sum of numbers in some closed range <em>[start, end]</em>. To make the task interesting, let&#8217;s do it concurrently using <em>N</em> threads.</p></div></div></div><div class="sect1"><h2>2. Divide and conquer</h2><div class="sectionbody"><div class="paragraph"><p>From general point of view, the described problem suits very well <em><a href="https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm" target="_blank" rel="noopener">divide and conquer</a></em> paradigm. So, applied to <em>sum finding problem</em>, general plan can look as follows:</p></div><div class="olist arabic"><ol class="arabic"><li><p>Divide the range into sub-ranges</p></li><li><p>Delegate the job of finding sum of sub-ranges to individual threads in the pool</p></li><li><p>Aggregate sub-ranges sums by collecting results from individual threads</p></li></ol></div></div></div><div class="sect1"><h2>3. Implementation alternatives</h2><div class="sectionbody"><div class="paragraph"><p>The approach described above can be implemented using different tools:</p></div><div class="ulist"><ul><li><p><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html" target="_blank" rel="noopener">Runnable</a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html" target="_blank" rel="noopener">Thread</a></p></li><li><p><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html" target="_blank" rel="noopener">ExecutorService</a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html" target="_blank" rel="noopener">Future</a></p></li><li><p><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html" target="_blank" rel="noopener">ExecutorService</a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html" target="_blank" rel="noopener">CompletableFuture</a></p></li><li><p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html" target="_blank" rel="noopener">ForkJoinPool</a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/BaseStream.html#parallel--" target="_blank" rel="noopener">Stream.parallel</a> method</p></li></ul></div><div class="paragraph"><p>Since I&#8217;m doing this as an exercise and just to have fun, I will do an implementation for each alternative. So, let&#8217;s start.</p></div><div class="sect2"><h3>3.1. ForkJoinPool and Stream.parallel</h3><div class="paragraph"><p>For our toy problem - the resulting code is pretty concise and declarative (except part of creating <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html" target="_blank" rel="noopener">ForkJoinPool</a>).</p></div><div class="paragraph"><p><em>Note:</em> <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html" target="_blank" rel="noopener">ForkJoinPool</a> is created manually in order to explicitly control the number of threads used. Probably, most often you would use <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#commonPool--" target="_blank" rel="noopener">common pool</a>, that is created and managed by JVM implicitly.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">import java.util.Scanner;import java.util.concurrent.ExecutionException;import java.util.concurrent.ForkJoinPool;import java.util.stream.IntStream;public class DivideAndConquerSum {    private static int sum(int rangeStart, int rangeEnd, int numberOfThreads) {        ForkJoinPool forkJoinPool = new ForkJoinPool(numberOfThreads);        try {            return forkJoinPool.submit(() -&gt;                    IntStream.rangeClosed(rangeStart, rangeEnd)                            .parallel()                            .sum()            ).get();        } catch (InterruptedException | ExecutionException e) {            throw new RuntimeException(e);        }    }    public static void main(String[] args) throws InterruptedException {        try (Scanner input = new Scanner(System.in)) {            int rangeStart, rangeEnd, numberOfThreads;            do {                System.out.print("Enter the range start: ");                rangeStart = input.nextInt();                System.out.print("Enter the range end: ");                rangeEnd = input.nextInt();                System.out.print("Enter the number of threads: ");                numberOfThreads = input.nextInt();                if (rangeStart &gt;= rangeEnd || numberOfThreads &lt; 1) {                    System.out.println("Warning: range start should be less then range end. Also number of threads should not be less then 1.");                }            } while (rangeStart &gt;= rangeEnd || numberOfThreads &lt; 1);            int sum = DivideAndConquerSum.sum(rangeStart, rangeEnd, numberOfThreads);            System.out.println(String.format("Sum of numbers in the range [%s, %s] found in %s threads is %s",                    rangeStart, rangeEnd, numberOfThreads, sum));        }    }}</code></pre></div></div></div><div class="sect2"><h3>3.2. ExecutorService and CompletableFuture</h3><div class="paragraph"><p>Starting from Java 8, we have pretty powerful and general tool in our toolbox - <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html" target="_blank" rel="noopener">CompletableFuture</a>. It allows to perform async operations in much easier way then before. And overall, code becomes more declarative and composable (though cumbersome sometimes).</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">import java.util.List;import java.util.Scanner;import java.util.concurrent.CompletableFuture;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.stream.Collectors;import java.util.stream.IntStream;public class DivideAndConquerSum {    private static int sum(int rangeStart, int rangeEnd, int numberOfThreads) {        int numberOfSubRanges = Math.min(numberOfThreads, rangeEnd - rangeStart + 1);        int numbersPerSubRange = findNumbersPerSubRanges(rangeStart, rangeEnd, numberOfThreads);        ExecutorService executorPool = Executors.newFixedThreadPool(numberOfSubRanges);        List&lt;CompletableFuture&lt;Integer&gt;&gt; subRanges = IntStream.range(0, numberOfSubRanges)                .mapToObj(subRangeIndex -&gt; {                    int lower = rangeStart + (subRangeIndex * numbersPerSubRange);                    int upper = (subRangeIndex == numberOfThreads - 1) ? rangeEnd : lower + numbersPerSubRange - 1;                    return CompletableFuture.supplyAsync(() -&gt; IntStream.rangeClosed(lower, upper).sum(), executorPool);                })                .collect(Collectors.toList());        return CompletableFuture.allOf(subRanges.toArray(new CompletableFuture[0]))                .thenApply(v -&gt; {                            Integer total = subRanges.stream()                                    .map(CompletableFuture::join)                                    .reduce(0, Integer::sum);                            executorPool.shutdownNow();                            return total;                        }                ).join();    }    private static int findNumbersPerSubRanges(int rangeStart, int rangeEnd, int numberOfThreads) {        if (numberOfThreads &gt;= rangeEnd - rangeStart + 1) {            return 1;        } else {            return (rangeEnd - rangeStart + 1) / numberOfThreads;        }    }    public static void main(String[] args) throws InterruptedException {        try (Scanner input = new Scanner(System.in)) {            int rangeStart, rangeEnd, numberOfThreads;            do {                System.out.print("Enter the range start: ");                rangeStart = input.nextInt();                System.out.print("Enter the range end: ");                rangeEnd = input.nextInt();                System.out.print("Enter the number of threads: ");                numberOfThreads = input.nextInt();                if (rangeStart &gt;= rangeEnd || numberOfThreads &lt; 1) {                    System.out.println("Warning: range start should be less then range end. Also number of threads should not be less then 1.");                }            } while (rangeStart &gt;= rangeEnd || numberOfThreads &lt; 1);            int sum = DivideAndConquerSum.sum(rangeStart, rangeEnd, numberOfThreads);            System.out.println(String.format("Sum of numbers in the range [%s, %s] found in %s threads is %s",                    rangeStart, rangeEnd, numberOfThreads, sum));        }    }}</code></pre></div></div><div class="paragraph"><p>As we can see, we have to manage sub-ranges explicitly. In case of our toy problem - it&#8217;s overkill, but in more complex situations, this is not so big price for async and composable execution.</p></div></div><div class="sect2"><h3>3.3. ExecutorService and Future</h3><div class="paragraph"><p>Combination of <a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html" target="_blank" rel="noopener">ExecutorService</a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html" target="_blank" rel="noopener">Future</a> is pretty powerful tool also. Although, it has the drawbacks, that led to introducing <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html" target="_blank" rel="noopener">CompletableFuture</a>: explicit blocking and problems to compose multiple futures in declarative way.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">import java.util.ArrayList;import java.util.List;import java.util.Scanner;import java.util.concurrent.Callable;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.Future;import java.util.concurrent.TimeUnit;import java.util.stream.IntStream;public class DivideAndConquerSum {    private static int sum(int rangeStart, int rangeEnd, int numberOfThreads) {        int totalSum = 0;        try {            int numberOfSubRanges = Math.min(numberOfThreads, rangeEnd - rangeStart + 1);            int numbersPerSubRange = findNumbersPerSubRanges(rangeStart, rangeEnd, numberOfThreads);            List&lt;Callable&lt;Integer&gt;&gt; subRanges = new ArrayList&lt;&gt;();            for (int subRangeIndex = 0; subRangeIndex &lt; numberOfSubRanges; subRangeIndex++) {                int lower = rangeStart + (subRangeIndex * numbersPerSubRange);                int upper = (subRangeIndex == numberOfThreads - 1) ? rangeEnd : lower + numbersPerSubRange - 1;                subRanges.add(() -&gt; IntStream.rangeClosed(lower, upper).sum());            }            ExecutorService executorPool = Executors.newFixedThreadPool(numberOfSubRanges);            List&lt;Future&lt;Integer&gt;&gt; resultFromParts = executorPool.invokeAll(subRanges, 10, TimeUnit.SECONDS);            executorPool.shutdown();            for (Future&lt;Integer&gt; result : resultFromParts) {                totalSum += result.get();            }        } catch (Exception ex) {            throw new RuntimeException(ex);        }        return totalSum;    }    private static int findNumbersPerSubRanges(int rangeStart, int rangeEnd, int numberOfThreads) {        if (numberOfThreads &gt;= rangeEnd - rangeStart + 1) {            return 1;        } else {            return (rangeEnd - rangeStart + 1) / numberOfThreads;        }    }    public static void main(String[] args) throws InterruptedException {        try (Scanner input = new Scanner(System.in)) {            int rangeStart, rangeEnd, numberOfThreads;            do {                System.out.print("Enter the range start: ");                rangeStart = input.nextInt();                System.out.print("Enter the range end: ");                rangeEnd = input.nextInt();                System.out.print("Enter the number of threads: ");                numberOfThreads = input.nextInt();                if (rangeStart &gt;= rangeEnd || numberOfThreads &lt; 1) {                    System.out.println("Warning: range start should be less then range end. Also number of threads should not be less then 1.");                }            } while (rangeStart &gt;= rangeEnd || numberOfThreads &lt; 1);            int sum = DivideAndConquerSum.sum(rangeStart, rangeEnd, numberOfThreads);            System.out.println(String.format("Sum of numbers in the range [%s, %s] found in %s threads is %s",                    rangeStart, rangeEnd, numberOfThreads, sum));        }    }}</code></pre></div></div></div><div class="sect2"><h3>3.4. Runnable and Thread</h3><div class="paragraph"><p>These are most basic tools, that could be used. The main advantage - they are available from very first version of Java.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">import java.util.Scanner;public class DivideAndConquerSum {    private static class Sum implements Runnable {        private final int lower;        private final int upper;        int sum;        Sum(int lower, int upper) {            this.lower = lower;            this.upper = upper;        }        @Override        public void run() {            for (int number = lower; number &lt;= upper; number++) {                sum += number;            }        }    }    private static int sum(int rangeStart, int rangeEnd, int numberOfThreads) throws InterruptedException {        int numberOfSubRanges = Math.min(numberOfThreads, rangeEnd - rangeStart + 1);        int numbersPerSubRange = findNumbersPerSubRanges(rangeStart, rangeEnd, numberOfThreads);        Sum[] sums = new Sum[numberOfSubRanges];        Thread[] pool = new Thread[numberOfSubRanges];        for (int index = 0; index &lt; numberOfSubRanges; index++) {            int lower = rangeStart + (index * numbersPerSubRange);            int upper = (index == numberOfThreads - 1) ? rangeEnd : lower + numbersPerSubRange - 1;            Sum task = new Sum(lower, upper);            sums[index] = task;            Thread thread = new Thread(task);            pool[index] = thread;            thread.start();        }        for (Thread thread : pool) {            thread.join();        }        int totalSum = 0;        for (Sum sum : sums) {            totalSum += sum.sum;        }        return totalSum;    }    private static int findNumbersPerSubRanges(int rangeStart, int rangeEnd, int numberOfThreads) {        if (numberOfThreads &gt;= rangeEnd - rangeStart + 1) {            return 1;        } else {            return (rangeEnd - rangeStart + 1) / numberOfThreads;        }    }    public static void main(String[] args) throws InterruptedException {        try (Scanner input = new Scanner(System.in)) {            int rangeStart, rangeEnd, numberOfThreads;            do {                System.out.print("Enter the range start: ");                rangeStart = input.nextInt();                System.out.print("Enter the range end: ");                rangeEnd = input.nextInt();                System.out.print("Enter the number of threads: ");                numberOfThreads = input.nextInt();                if (rangeStart &gt;= rangeEnd || numberOfThreads &lt; 1) {                    System.out.println("Warning: range start should be less then range end. Also number of threads should not be less then 1.");                }            } while (rangeStart &gt;= rangeEnd || numberOfThreads &lt; 1);            int sum = DivideAndConquerSum.sum(rangeStart, rangeEnd, numberOfThreads);            System.out.println(String.format("Sum of numbers in the range [%s, %s] found in %s threads is %s",                    rangeStart, rangeEnd, numberOfThreads, sum));        }    }}</code></pre></div></div></div></div></div><div class="sect1"><h2>4. Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>If you would encounter a task to find sum of integers in the given range, you should choose <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html" target="_blank" rel="noopener">ForkJoinPool</a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/BaseStream.html#parallel--" target="_blank" rel="noopener">Stream.parallel</a> for several basic reasons:</p></div><div class="ulist"><ul><li><p>the produced code is most concise</p></li><li><p>the produced code relies on standard Java library, that is heavily tested and widely used</p></li></ul></div><div class="paragraph"><p>However, for situations a bit more complex then described toy problem, other approaches become relevant:</p></div><div class="ulist"><ul><li><p>with Java prior to Java 5 - you would use <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html" target="_blank" rel="noopener">Runnable</a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html" target="_blank" rel="noopener">Thread</a></p></li><li><p>with Java 5/6/7 - consider using <a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html" target="_blank" rel="noopener">ExecutorService</a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html" target="_blank" rel="noopener">Future</a></p></li><li><p>with Java 8 - consider using <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html" target="_blank" rel="noopener">CompletableFuture</a></p></li></ul></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;In the post I will give practical comparison of using different Java classes for implementing the same toy problem: finding sum of integers in given range.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="java.util.concurrent" scheme="https://www.zghurskyi.com/categories/java-util-concurrent/"/>
    
      <category term="CompletableFuture" scheme="https://www.zghurskyi.com/categories/java-util-concurrent/completablefuture/"/>
    
      <category term="Future" scheme="https://www.zghurskyi.com/categories/java-util-concurrent/completablefuture/future/"/>
    
      <category term="Thread" scheme="https://www.zghurskyi.com/categories/java-util-concurrent/completablefuture/future/thread/"/>
    
      <category term="Runnable" scheme="https://www.zghurskyi.com/categories/java-util-concurrent/completablefuture/future/thread/runnable/"/>
    
      <category term="ForkJoinPool" scheme="https://www.zghurskyi.com/categories/java-util-concurrent/completablefuture/future/thread/runnable/forkjoinpool/"/>
    
    
      <category term="java.util.concurrent" scheme="https://www.zghurskyi.com/tags/java-util-concurrent/"/>
    
      <category term="CompletableFuture" scheme="https://www.zghurskyi.com/tags/completablefuture/"/>
    
      <category term="Future" scheme="https://www.zghurskyi.com/tags/future/"/>
    
      <category term="Thread" scheme="https://www.zghurskyi.com/tags/thread/"/>
    
      <category term="Runnable" scheme="https://www.zghurskyi.com/tags/runnable/"/>
    
      <category term="ForkJoinPool" scheme="https://www.zghurskyi.com/tags/forkjoinpool/"/>
    
  </entry>
  
  <entry>
    <title>Monitoring Spring Boot service with Prometheus and Grafana</title>
    <link href="https://www.zghurskyi.com/observability/"/>
    <id>https://www.zghurskyi.com/observability/</id>
    <published>2019-09-11T22:07:41.000Z</published>
    <updated>2019-10-10T22:07:41.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Different people mean different things, when they talk about <code>observability</code>. To stay practical and concrete, by observability I mean <code>monitoring, tracing and logging</code>. In this post I will give recipe of adding monitoring to your Spring Boot service with Prometheus and Grafana.</p></div><div class="paragraph"><p><strong>TL;DR</strong> If you prefer reading code vs reading posts&#8201;&#8212;&#8201;just follow this <a href="https://github.com/zghurskyi/investigations/tree/master/investigation-micrometer" target="_blank" rel="noopener">link</a>.</p></div><a id="more"></a><div class="sect1"><h2>1. What will we build?</h2><div class="sectionbody"><div class="paragraph"><p>I will follow simple plan:</p></div><div class="olist arabic"><ol class="arabic"><li><p>Setup vanilla Spring Boot service (straight from <a href="https://start.spring.io" class="bare" target="_blank" rel="noopener">https://start.spring.io</a>)</p></li><li><p>Setup Prometheus</p></li><li><p>Setup Grafana</p></li><li><p>Perform some basic load testing and observe results</p></li></ol></div><div class="paragraph"><p>So, let&#8217;s start.</p></div></div></div><div class="sect1"><h2>2. Bootstrapping Spring Boot service</h2><div class="sectionbody"><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell hljs" data-lang="shell">$ curl https://start.spring.io/starter.zip \-d dependencies=actuator,webflux,lombok \-d type=maven-project \-d baseDir=service \-d groupId=com.oxymorus.monitoring \-d artifactId=service \-d bootVersion=2.1.9.RELEASE \-o service.zip$ unzip service.zip &amp;&amp; rm service.zip &amp;&amp; cd service</code></pre></div></div><div class="paragraph"><p>After bootstrapping bare-bones service, let&#8217;s prepare next steps by creating <code>monitoring</code> directory. This will be our base directory, where we place scripts and configs for Prometheus and Grafana:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell hljs" data-lang="shell">$ mkdir monitoring &amp;&amp; cd monitoring</code></pre></div></div></div></div><div class="sect1"><h2>3. Setting-up Prometheus</h2><div class="sectionbody"><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content"><a href="https://prometheus.io/docs/introduction/overview/" target="_blank" rel="noopener">Prometheus</a> is an open-source systems monitoring and alerting toolkit.</td></tr></table></div><div class="paragraph"><p>Spring Boot provides monitoring data in Promethues format through <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-metrics.html#production-ready-metrics-export-prometheus" target="_blank" rel="noopener">/actuator/prometheus</a> endpoint. So, first, we need to expose this endpoint in <code>application.yml</code>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">management:  endpoints:    web:      exposure:        include:          - prometheus</code></pre></div></div><div class="paragraph"><p>Next, we need to configure scrapping of exposed endpoint by Prometheus. To do this, we provide <a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/" target="_blank" rel="noopener">prometheus.yml</a>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml"># my global configglobal:  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.  # scrape_timeout is set to the global default (10s).# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.rule_files:# - "first_rules.yml"# - "second_rules.yml"# A scrape configuration containing exactly one endpoint to scrape:# Here it's Prometheus itself.scrape_configs:  # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.  - job_name: 'prometheus'    # metrics_path defaults to '/metrics'    # scheme defaults to 'http'.    static_configs:      - targets: ['127.0.0.1:9090']  - job_name: 'spring-actuator'    metrics_path: '/actuator/prometheus'    scrape_interval: 5s    static_configs:      - targets: ['127.0.0.1:8080']</code></pre></div></div><div class="paragraph"><p>Finally, we can launch Promethues with Docker using following script:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">#!/bin/shdocker run --net=host -p 9090:9090 \-v $(pwd)/prometheus.yml:/etc/prometheus/prometheus.yml \prom/prometheus:v2.2.0</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Don&#8217;t forget to make script executable with <code>chmod +x prometheus.sh</code></td></tr></table></div><div class="paragraph"><p>The script starts Prometheus on port 9090 and configures it to scrape Spring Boot <code>/actuator/prometheus</code> endpoint.</p></div><div class="paragraph"><p>We can check that everything is working by visiting default dashboard at <code>localhost:9090</code>:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/prometheus-dashboard.png"><img src="/images/prometheus-dashboard.png" alt="prometheus dashboard"></a></div></div></div></div></div></div><div class="sect1"><h2>4. Setting-up Grafana</h2><div class="sectionbody"><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content"><a href="https://grafana.com/docs/v4.3/" target="_blank" rel="noopener">Grafana</a> is an open source metric analytics &amp; visualization suite. It is most commonly used for visualizing time series data for infrastructure and application analytics but many use it in other domains including industrial sensors, home automation, weather, and process control.</td></tr></table></div><div class="paragraph"><p>Grafana uses <a href="https://grafana.com/docs/guides/basic_concepts/" target="_blank" rel="noopener">dashboards</a> to organize your monitoring/metrics visualisation. So, we will preconfigure several dashboards:</p></div><div class="ulist"><ul><li><p><a href="https://github.com/zghurskyi/investigations/blob/master/investigation-micrometer/monitoring/dashboards/jvmgc-dashboard.json" target="_blank" rel="noopener">JVM garbage collection stats</a></p></li><li><p><a href="https://github.com/zghurskyi/investigations/blob/master/investigation-micrometer/monitoring/dashboards/latency-dashboard.json" target="_blank" rel="noopener">Latency stats&#8201;&#8212;&#8201;max &amp; 99th percentile</a></p></li><li><p><a href="https://github.com/zghurskyi/investigations/blob/master/investigation-micrometer/monitoring/dashboards/processor-dashboard.json" target="_blank" rel="noopener">Processor/CPU load</a></p></li></ul></div><div class="paragraph"><p>To provision these dashboards we need to provide <a href="https://grafana.com/docs/administration/provisioning/#dashboards" target="_blank" rel="noopener">grafana-dashboard.yml</a>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">apiVersion: 1providers:  - name: 'default'    folder: 'Spring Boot'    type: file    options:      path: /etc/grafana/dashboards</code></pre></div></div><div class="paragraph"><p>Next, to connect Grafana with Prometheus as its datasource we should provide <a href="https://grafana.com/docs/administration/provisioning/#datasources" target="_blank" rel="noopener">grafana-datasource.yml</a>:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">apiVersion: 1datasources:  - name: prometheus    type: prometheus    access: direct    url: http://127.0.0.1:9090</code></pre></div></div><div class="paragraph"><p>Finally, after all preparation we can start Grafana with following script:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">#!/bin/shdocker run -i --net=host \-p 3000:3000 \-v $(pwd)/grafana-datasource.yml:/etc/grafana/provisioning/datasources/grafana-datasource.yml \-v $(pwd)/dashboards/grafana-dashboard.yml:/etc/grafana/provisioning/dashboards/grafana-dashboard.yml \-v $(pwd)/dashboards/jvmgc-dashboard.json:/etc/grafana/dashboards/jvmgc.json \-v $(pwd)/dashboards/latency-dashboard.json:/etc/grafana/dashboards/latency.json \-v $(pwd)/dashboards/processor-dashboard.json:/etc/grafana/dashboards/processor.json \grafana/grafana:5.1.0</code></pre></div></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">Don&#8217;t forget to make script executable with <code>chmod +x prometheus.sh</code></td></tr></table></div><div class="paragraph"><p>The script starts Grafana on <code>localhost:3000</code>.</p></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content">To login use default admin/admin credentials.</td></tr></table></div><div class="paragraph"><p>To verify everything is working, check preconfigured JVM GC dashboard:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/grafana-dashboard.png"><img src="/images/grafana-dashboard.png" alt="grafana dashboard"></a></div></div></div></div></div></div><div class="sect1"><h2>5. Perform some basic load testing and observe results</h2><div class="sectionbody"><div class="paragraph"><p>After service is running and monitoring is properly configured, we can perform some load testing and observe how service behaves.</p></div><div class="paragraph"><p>For load testing we will use simple command line utility <a href="https://httpd.apache.org/docs/2.4/programs/ab.html" target="_blank" rel="noopener">Apache Benchmark</a>.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ ab -n 1000000 -c 10 http://localhost:8080/actuator/prometheus</code></pre></div></div><div class="paragraph"><p>This command performs 1 million requests in 10 concurrent threads to the <code><a href="http://localhost:8080/actuator/prometheus" class="bare" target="_blank" rel="noopener">http://localhost:8080/actuator/prometheus</a></code>.</p></div><div class="paragraph"><p>So, it&#8217;s time to observe some results:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/grafana-heap-utilization.png"><img src="/images/grafana-heap-utilization.png" alt="grafana heap utilization"></a></div></div></div></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/grafana-average-gc-pause-time.png"><img src="/images/grafana-average-gc-pause-time.png" alt="grafana average gc pause time"></a></div></div></div></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/grafana-max-latency-by-endpoint.png"><img src="/images/grafana-max-latency-by-endpoint.png" alt="grafana max latency by endpoint"></a></div></div></div></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/grafana-request-throughput.png"><img src="/images/grafana-request-throughput.png" alt="grafana request throughput"></a></div></div></div></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/grafana-cpu-load.png"><img src="/images/grafana-cpu-load.png" alt="grafana cpu load"></a></div></div></div></div></div></div><div class="sect1"><h2>6. Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>It&#8217;s actually straight-forward to setup some basic Prometheus/Grafana monitoring, since all tools are already in place and fit together pretty well.</p></div><div class="paragraph"><p>Available tools allow to get comprehensive view of the system.</p></div><div class="paragraph"><p>Next step, after having this harness in place, is to configure custom metrics with Micrometer and make sense from all of them. I&#8217;m saving it for the next time, so stay tuned!</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Different people mean different things, when they talk about &lt;code&gt;observability&lt;/code&gt;. To stay practical and concrete, by observability I mean &lt;code&gt;monitoring, tracing and logging&lt;/code&gt;. In this post I will give recipe of adding monitoring to your Spring Boot service with Prometheus and Grafana.&lt;/p&gt;&lt;/div&gt;&lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; If you prefer reading code vs reading posts&amp;#8201;&amp;#8212;&amp;#8201;just follow this &lt;a href=&quot;https://github.com/zghurskyi/investigations/tree/master/investigation-micrometer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Observability" scheme="https://www.zghurskyi.com/categories/observability/"/>
    
      <category term="Spring Boot" scheme="https://www.zghurskyi.com/categories/observability/spring-boot/"/>
    
      <category term="Prometheus" scheme="https://www.zghurskyi.com/categories/observability/spring-boot/prometheus/"/>
    
      <category term="Grafana" scheme="https://www.zghurskyi.com/categories/observability/spring-boot/prometheus/grafana/"/>
    
      <category term="Docker" scheme="https://www.zghurskyi.com/categories/observability/spring-boot/prometheus/grafana/docker/"/>
    
    
      <category term="Docker" scheme="https://www.zghurskyi.com/tags/docker/"/>
    
      <category term="Spring Boot" scheme="https://www.zghurskyi.com/tags/spring-boot/"/>
    
      <category term="Observability" scheme="https://www.zghurskyi.com/tags/observability/"/>
    
      <category term="Prometheus" scheme="https://www.zghurskyi.com/tags/prometheus/"/>
    
      <category term="Grafana" scheme="https://www.zghurskyi.com/tags/grafana/"/>
    
  </entry>
  
  <entry>
    <title>From Java 8 to 11: quick tour</title>
    <link href="https://www.zghurskyi.com/language-features-java8-to-java11/"/>
    <id>https://www.zghurskyi.com/language-features-java8-to-java11/</id>
    <published>2019-06-27T18:07:41.000Z</published>
    <updated>2019-10-17T23:19:41.000Z</updated>
    
    <content type="html"><![CDATA[<div class="sect1"><h2>1. Language Changes for Java SE 9</h2><div class="sectionbody"><div class="sect2"><h3>1.1. Platform module system</h3><div class="paragraph"><p>The major change to Java 9 is the introduction of the Java Platform module system.</p></div><div class="paragraph"><p>The Java Platform module system introduces a new kind of Java programming component&#8201;&#8212;&#8201;the module, which is a named, self-describing collection of code and data. Its code is organized as a set of packages containing types (i.e., Java classes and interfaces). Its data includes resources and other kinds of static information. Modules can either export or encapsulate packages, and they express dependencies on other modules explicitly.</p></div><div class="paragraph"><p>To learn more about the Java Platform module system, see <a href="http://openjdk.java.net/projects/jigsaw/" target="_blank" rel="noopener">Project Jigsaw</a> on OpenJDK.</p></div></div><div class="sect2"><h3>1.2. Collections <em>.of()</em> factory methods</h3><div class="paragraph"><p>Java 9 introduces collection literals for the easier definition of the common collections:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">List list = List.of(1, 2, 3);Set set = Set.of("foo", "bar", "baz");Map map = Map.of("hello", "world");Map mapOfEntries = Map.ofEntries(Map.entry("o", 0), Map.entry("z", 1));</code></pre></div></div></div><div class="sect2"><h3>1.3. Stream API changes</h3><div class="sect3"><h4>1.3.1. <code>takeWhile</code></h4><div class="paragraph"><p>takeWhile takes elements from the initial stream while the predicate holds true. Meaning that when an element is encountered that does not match the predicate, the rest of the stream is discarded.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Stream.of(2, 4, 6, 8, 9, 10, 12)      .takeWhile(n -&gt; n % 2 == 0)      .forEach(System.out::print); // 2468</code></pre></div></div></div><div class="sect3"><h4>1.3.2. <code>dropWhile</code></h4><div class="paragraph"><p>dropWhile is essentially the opposite of takeWhile. Instead of taking elements from the stream until the first element which does not match the predicate, dropWhile drops these elements and includes the remaining elements in the returned stream.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Stream.of(2, 4, 6, 8, 9, 10, 12)      .dropWhile(n -&gt; n % 2 == 0)      .forEach(System.out::print); // 91012</code></pre></div></div></div></div><div class="sect2"><h3>1.4. Optional API changes</h3><div class="sect3"><h4>1.4.1. <code>or()</code> method</h4><div class="paragraph"><p>The <code>or()</code> method gives you a fluent way of chaining behavior on <code>Optional</code> without checking if the value is present or not.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Optional.empty().or(() -&gt; Optional.of("Hello world"));</code></pre></div></div></div><div class="sect3"><h4>1.4.2. Converting an <code>Optional</code> into a <code>Stream</code></h4><div class="paragraph"><p>Now it&#8217;s possible to convert an <code>Optional</code> into a <code>Stream</code> containing at most one element. It’s really useful if you want to use the laziness of the <em>Streams API</em>. Namely, calling <code>map()</code> on the <code>Optional</code> executes the mapping function immediately, on the <code>Stream</code>&#8201;&#8212;&#8201;not.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Optional optional = Optional.of(1).map(x -&gt; x * 3); // variable contains Optional[3]Stream stream = Optional.of(1).stream().map(x -&gt; x * 3); // variable contains lazy stream, that is not evaluated until terminal operation</code></pre></div></div></div><div class="sect3"><h4>1.4.3. <em>ifPresentOrElse()</em> method</h4><div class="paragraph"><p>In Java 8 you could specify the behavior you want to execute if the value in an <code>Optional</code> is present.</p></div><div class="paragraph"><p>In Java 9 you can pass 2 Runnables to specify what to do if the value is present and otherwise.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">Optional.empty().ifPresentOrElse(x -&gt; System.out.println(x), () -&gt; System.out.println("empty")); // empty</code></pre></div></div></div></div><div class="sect2"><h3>1.5. Process Management API</h3><div class="paragraph"><p>Java 9 adds the <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ProcessHandle.html" target="_blank" rel="noopener">ProcessHandle</a> class, which offers a rich API to inspect the processes.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">ProcessHandle current = ProcessHandle.current(); current.pid() // prints current process id</code></pre></div></div></div><div class="sect2"><h3>1.6. StackWalker</h3><div class="paragraph"><p><a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/StackWalker.html" target="_blank" rel="noopener">StackWalker</a> enables you to walk, filter and otherwise access stack traces in a very efficient manner</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">StackWalker.getInstance()           .walk(s -&gt; s.limit(5)           .collect(Collectors.toList()));</code></pre></div></div></div><div class="sect2"><h3>1.7. More concise <code>try-with-resources</code> statements</h3><div class="paragraph"><p>If you already have a resource as a final or effectively final variable, you can use that variable in a <code>try-with-resources</code> statement without declaring a new variable. An "effectively final" variable is one whose value is never changed after it is initialized.</p></div><div class="paragraph"><p>In Java SE 7 or 8, you would declare new variables, like this:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">try (Resource r1 = resource1; Resource r2 = resource2) {    // do something}</code></pre></div></div><div class="paragraph"><p>In Java SE 9 and beyond, you don’t need to declare r1 and r2 in a <code>try-with-resources</code> statement:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">try (resource1; resource2) {    // do something}</code></pre></div></div></div><div class="sect2"><h3>1.8. Private interface methods</h3><div class="paragraph"><p>Private interface methods are supported. This support allows non-abstract methods of an interface to share code between them.</p></div></div><div class="sect2"><h3>1.9. The underscore character is not a legal name</h3><div class="paragraph"><p>If you use the underscore character (<code>"_"</code>) an identifier, your source code can no longer be compiled.</p></div></div></div></div><div class="sect1"><h2>2. Language Changes for Java SE 10</h2><div class="sectionbody"><div class="paragraph"><p>Java SE 10 introduces support for inferring the type of local variables from the context, which makes code more readable and reduces the amount of required boilerplate code.</p></div><div class="sect2"><h3>2.1. Local-Variable Type Inference with <code>var</code></h3><div class="paragraph"><p>In Java SE 10 and later, you can declare local variables with non-null initializers with the <code>var</code> identifier, which can help you write code that’s easier to read.</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">URL url = new URL("http://www.oracle.com/");URLConnection conn = url.openConnection();Reader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));</code></pre></div></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">var url = new URL("www.oracle.com");var conn = url.openConnection();var reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));</code></pre></div></div><div class="paragraph"><p><code>var</code> is a reserved type name, not a keyword, which means that existing code that uses <code>var</code> as a variable, method,or package name is not affected. However, code that uses <code>var</code> as a class or interface name is affected and the class or interface needs to be renamed.</p></div><div class="paragraph"><p><code>var</code> can be used for the following types of variables:</p></div><div class="ulist"><ul><li><p>Local variable declarations with initializers:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">var list = new ArrayList(); // infers ArrayListvar stream = list.stream(); // infers Streamvar path = Paths.get(fileName); // infers Pathvar bytes = Files.readAllBytes(path); // infers bytes[]</code></pre></div></div></li><li><p>Enhanced <code>for-loop</code> indexes:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">List myList = Arrays.asList("a", "b", "c");for (var element : myList) { ... } // infers String</code></pre></div></div></li><li><p>Index variables declared in traditional <code>for-loop</code>:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">for (var counter = 0; counter &lt; 10; counter++) {...} // infers int</code></pre></div></div></li><li><p><code>try-with-resources</code> variable:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">try (var input = new FileInputStream("validation.txt")) {...} // infers FileInputStream</code></pre></div></div></li><li><p>A lambda expression whose formal parameters have inferred types is implicitly typed:</p><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">BiFunction = (a, b) -&gt; a + b</code></pre></div></div></li></ul></div><div class="paragraph"><p><strong><code>var</code> style guide:</strong> <code>var</code> should be used with caution. To get more details about recommended uses,consult with official <a href="https://openjdk.java.net/projects/amber/LVTIstyle.html" target="_blank" rel="noopener">style guide</a>.</p></div></div></div></div><div class="sect1"><h2>3. Language Changes for Java SE 11</h2><div class="sectionbody"><div class="sect2"><h3>3.1. Implicitly typed lambda expression</h3><div class="paragraph"><p>In Java SE 11 and later, you can declare each formal parameter of an implicitly typed lambda expression with the <code>var</code> identifier:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">(var a, var b) -&gt; a + b;</code></pre></div></div><div class="paragraph"><p>Why would we want to use <code>var</code> for lambda parameters when we could simply skip the types?</p></div><div class="paragraph"><p>One benefit of uniformity is that annotations can be applied to lambda parameters:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">(@Nonnull var s1, @Nullable var s2) -&gt; s1 + s2</code></pre></div></div></div></div></div><div class="sect1"><h2>4. Java and Docker</h2><div class="sectionbody"><div class="paragraph"><p>One of the key features of Docker is the ability to limit a container’s memory and CPU usage. Unfortunately, this is precisely where Java runs short. Let’s use an example to understand the problem. Imagine you have a node with 32GB of memory and you want to run a Java application with a limit of 1GB. If you do not provide a <code>-Xmx</code> parameter the JVM will use its default configuration:</p></div><div class="olist arabic"><ol class="arabic"><li><p>The JVM will check the total available memory. Because the JVM is not aware of the Linux container, it thinks it is running on the Host machine and has access to the full 32GB of available memory.</p></li><li><p>By default, the JVM will use <code>MaxMemory/4</code> which in this case is 8GB (32GB/4).</p></li><li><p>As the heap size grows and goes beyond 1GB, the container will be killed by Docker (<code>"OOM killed"</code>).</p></li><li><p>Of course, an obvious solution is to fix the JVM’s heap size using <code>-Xmx</code> parameter, but that means you need to control memory twice, once in Docker and once in the JVM.</p></li></ol></div><div class="paragraph"><p>The first workaround for this issue was released with Java 8u131 and Java 9:</p></div><div class="olist arabic"><ol class="arabic"><li><p>Use <code>-XX:+UnlockExperimentalVMOptions</code></p></li><li><p>Use <code>-XX:+UseCGroupMemoryLimitForHeap</code> which would tell the JVM to check for the cgroup memory limit to set the maximum heap size</p></li><li><p>Use <code>-XX:MaxRAMFraction</code>, to limit portion of memory that can be allocated to the JVM.</p></li><li><p>Finally, application should control explicitly the thread pools sizes, and limit common ForkJoinPool parallelism with <code>-Djava.util.concurrent.ForkJoinPool.common.parallelism=2</code></p></li></ol></div><div class="paragraph"><p>So, with Java 8u131+ and Java 9 you’d have something like:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">-XX:+UnlockExperimentalVMOptions-XX:+UseCGroupMemoryLimitForHeap-XX:MaxRAMFraction=2-Djava.util.concurrent.ForkJoinPool.common.parallelism=2</code></pre></div></div><div class="paragraph"><p>Starting from Java 10 applying CPU and memory limits to containerized JVMs becomes straightforward. The JVM will detect hardware capability of the container correctly, tune itself appropriately and make a good representation of the available capacity to the application. As a result, not only CPU Sets but also CPU Shares are now examined by JVM. Furthermore, this becomes the default behaviour, and can only be disabled via <code>-XX:-UseContainerSupport</code> option.</p></div></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;sect1&quot;&gt;&lt;h2&gt;1. Language Changes for Java SE 9&lt;/h2&gt;&lt;div class=&quot;sectionbody&quot;&gt;&lt;div class=&quot;sect2&quot;&gt;&lt;h3&gt;1.1. Platform module system&lt;/h3
      
    
    </summary>
    
      <category term="Java 8" scheme="https://www.zghurskyi.com/categories/java-8/"/>
    
      <category term="Java 9" scheme="https://www.zghurskyi.com/categories/java-8/java-9/"/>
    
      <category term="Java 10" scheme="https://www.zghurskyi.com/categories/java-8/java-9/java-10/"/>
    
      <category term="Java 11" scheme="https://www.zghurskyi.com/categories/java-8/java-9/java-10/java-11/"/>
    
    
      <category term="Java 8" scheme="https://www.zghurskyi.com/tags/java-8/"/>
    
      <category term="Java 11" scheme="https://www.zghurskyi.com/tags/java-11/"/>
    
      <category term="Java 9" scheme="https://www.zghurskyi.com/tags/java-9/"/>
    
      <category term="Java 10" scheme="https://www.zghurskyi.com/tags/java-10/"/>
    
  </entry>
  
  <entry>
    <title>Kafka Provision Spring Boot Starter</title>
    <link href="https://www.zghurskyi.com/kafka-provision-spring-boot-starter/"/>
    <id>https://www.zghurskyi.com/kafka-provision-spring-boot-starter/</id>
    <published>2019-06-21T22:39:55.000Z</published>
    <updated>2019-10-07T22:39:55.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p><a href="https://github.com/zghurskyi/kafka-provision-spring-boot-starter" target="_blank" rel="noopener">Kafka Provision Spring Boot Starter</a> enables distributed Kafka topics provisioning and centralized topic configs management.</p></div><a id="more"></a><div class="sect1"><h2>Overview</h2><div class="sectionbody"><div class="paragraph"><p><a href="https://github.com/zghurskyi/kafka-provision-spring-boot-starter" target="_blank" rel="noopener">Kafka Provision Spring Boot Starter</a> supports following set of features:</p></div><div class="ulist"><ul><li><p>creating new topics</p></li><li><p>adding partitions to the existing topics</p></li><li><p>setting/updating topic configurations</p></li></ul></div><div class="paragraph"><p>In this post I will describe the process of creating application, that uses the starter.</p></div></div></div><div class="sect1"><h2>Demo application description</h2><div class="sectionbody"><div class="paragraph"><p>To not overshadow main goal, the demo application will be really simple. We will create 2 "microservices":</p></div><div class="ulist"><ul><li><p>The first service will produce tasks and push them to the <code>tasks</code> topic</p></li><li><p>The second service will pull the tasks from the topic, sleep randomly and send events to <code>results</code> topic</p></li></ul></div><div class="paragraph"><p>So, everything sounds really simple - let&#8217;s overengineer it as much as possible!</p></div></div></div><div class="sect1"><h2>Setting up basic Spring Boot services</h2><div class="sectionbody"><div class="paragraph"><p>First, let&#8217;s bootstrap Spring Boot app with Spring Cloud Stream, Spring Kafka and Lombok support:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ curl https://start.spring.io/starter.zip \-d dependencies=cloud-stream,kafka,lombok \-d type=gradle-project \-d baseDir=task-producer \-d groupId=com.oxymorus.kafka.producer \-d artifactId=task-producer \-o task-producer.zip$ unzip task-producer.zip &amp;&amp; rm task-producer.zip</code></pre></div></div><div class="paragraph"><p>Just a quick note: Spring Cloud Stream is a framework for building highly scalable event-driven microservices connected with shared messaging systems.</p></div><div class="paragraph"><p>The core building blocks of Spring Cloud Stream are:</p></div><div class="ulist"><ul><li><p>Destination Binders: Components responsible to provide integration with the external messaging systems.</p></li><li><p>Destination Bindings: Bridge between the external messaging systems and application provided Producers and Consumers of messages (created by the Destination Binders).</p></li><li><p>Message: The canonical data structure used by producers and consumers to communicate with Destination Binders (and thus other applications via external messaging systems).</p></li></ul></div><div class="paragraph"><p>To get more detail just read the official reference <a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/2.1.2.RELEASE/single/spring-cloud-stream.html#_main_concepts" target="_blank" rel="noopener">here.</a></p></div><div class="paragraph"><p>Ok, let&#8217;s get back to our main course and bootstrap task-consumer service:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ curl https://start.spring.io/starter.zip -d dependencies=cloud-stream,kafka,lombok \-d type=gradle-project \-d baseDir=task-consumer \-d groupId=com.oxymorus.kafka.consumer \-d artifactId=task-consumer \-o task-consumer.zip$ unzip task-consumer.zip &amp;&amp; rm task-consumer.zip</code></pre></div></div></div></div><div class="sect1"><h2>Configuring Kafka topics</h2><div class="sectionbody"><div class="paragraph"><p>As described earlier two created services will communicate over Kafka topics: <code>tasks</code> and <code>results</code>. So, we need to create &amp; configure these topics. Here, comes the time for <a href="https://github.com/zghurskyi/kafka-provision-spring-boot-starter" target="_blank" rel="noopener">Kafka Provision Spring Boot Starter</a>.</p></div><div class="paragraph"><p>We will do this in three steps:</p></div><div class="olist arabic"><ol class="arabic"><li><p>Add dependency</p></li><li><p>Add @EnableTopicProvisioning</p></li><li><p>Configure topics</p></li></ol></div><div class="paragraph"><p>Let&#8217;s do this procedure step-by-step for task-producer service. First, let&#8217;s add dependency to build.gradle:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-groovy hljs" data-lang="groovy">dependencies {    implementation 'io.github.zghurskyi.kafka:kafka-provision-spring-boot-starter:0.0.1'}</code></pre></div></div><div class="paragraph"><p>Next, let&#8217;s add @EnableTopicProvisioning to TaskProducerApp class:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-java hljs" data-lang="java">package com.oxymorus.kafka.producer;import io.github.zghurskyi.kafka.EnableTopicProvisioning;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplication@EnableTopicProvisioningpublic class TaskProducerApp {  public static void main(String[] args) {    SpringApplication.run(TaskProducerApp.class, args);  }}</code></pre></div></div><div class="paragraph"><p>And finally, let&#8217;s configure required topics:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">kafka.provision:  brokers: localhost:9092  topics:  - name: tasks    numPartitions: 4    replicationFactor: 1    configs:      cleanup.policy: delete      retention.ms: 3600000  - name: results    numPartitions: 4    replicationFactor: 1    configs:      cleanup.policy: delete      retention.ms: 3600000</code></pre></div></div><div class="paragraph"><p>The above steps are similar for <code>task-consumer</code> service.</p></div><div class="paragraph"><p>The details of setting up Spring Cloud Stream &amp; Kafka in Spring Boot app deserve separate blog post, so to just stay on point I will skip them. You can find completed demo app <a href="https://github.com/zghurskyi/kafka-provision-examples" target="_blank" rel="noopener">here</a>.</p></div></div></div><div class="sect1"><h2>Setting up Kafka infrastructure</h2><div class="sectionbody"><div class="paragraph"><p>For the purposes of this demo we set up infrastructure with following docker-compose.yml:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-yaml hljs" data-lang="yaml">version: '3'services:    kafka:        image: confluentinc/cp-kafka:latest        container_name: kafka        ports:        - "9092:9092"        depends_on:        - zookeeper        environment:          KAFKA_BROKER_ID: 1          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1          KAFKA_MESSAGE_MAX_BYTES: 10000000    zookeeper:        image: confluentinc/cp-zookeeper:latest        container_name: zookeeper        ports:        - "2181:2181"        environment:          ZOOKEEPER_CLIENT_PORT: 2181          ZOOKEEPER_TICK_TIME: 2000          ZOOKEEPER_INIT_LIMIT: 5          ZOOKEEPER_SYNC_LIMIT: 2</code></pre></div></div></div></div><div class="sect1"><h2>Putting everything together</h2><div class="sectionbody"><div class="paragraph"><p>The time has come to start everything up:</p></div><div class="ulist"><ul><li><p>Boot up Kafka with docker-compose.yml:</p></li></ul></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ cd kafka-provision-examples/$ docker-compose up</code></pre></div></div><div class="ulist"><ul><li><p>Build and start <code>task-producer</code>:</p></li></ul></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ ./task-producer/gradlew -b ./task-producer/build.gradle clean build$ java -jar task-producer/build/libs/task-producer-0.0.1-SNAPSHOT.jar</code></pre></div></div><div class="ulist"><ul><li><p>Build and start <code>task-consumer</code>:</p></li></ul></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-shell script hljs" data-lang="shell script">$ ./task-consumer/gradlew -b ./task-consumer/build.gradle clean build$ java -jar task-consumer/build/libs/task-consumer-0.0.1-SNAPSHOT.jar</code></pre></div></div><div class="paragraph"><p>After starting everything up, we will see something like this in the logs:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-logs hljs" data-lang="logs">task_producer    | 2019-04-21 10:27:49.071  INFO 1 --- [container-0-C-1] c.o.kafka.bindings.ResultsListener       : Received: ResultMessage(action=EAT, status=SUCCESS)task_producer    | 2019-04-21 10:27:49.191  INFO 1 --- [   scheduling-1] c.o.kafka.bindings.TasksPublisher        : Published: TaskMessage(task=Task(action=SLEEP))task_producer    | 2019-04-21 10:27:49.413  INFO 1 --- [container-0-C-1] c.o.kafka.bindings.ResultsListener       : Received: ResultMessage(action=WRITE_CODE, status=SUCCESS)task_producer    | 2019-04-21 10:27:50.191  INFO 1 --- [   scheduling-1] c.o.kafka.bindings.TasksPublisher        : Published: TaskMessage(task=Task(action=SLEEP))task_producer    | 2019-04-21 10:27:50.826  INFO 1 --- [container-0-C-1] c.o.kafka.bindings.ResultsListener       : Received: ResultMessage(action=EAT, status=FAIL)task_producer    | 2019-04-21 10:27:52.945  INFO 1 --- [container-0-C-1] c.o.kafka.bindings.ResultsListener       : Received: ResultMessage(action=SLEEP, status=SKIP_THIS_TIME)task_producer    | 2019-04-21 10:27:53.191  INFO 1 --- [   scheduling-1] c.o.kafka.bindings.TasksPublisher        : Received: ResultMessage(action=WRITE_CODE, status=SUCCESS)</code></pre></div></div><div class="paragraph"><p>This indicates, that everything works as it&#8217;s supposed to :)</p></div></div></div><div class="sect1"><h2>Checking topics configuration</h2><div class="sectionbody"><div class="paragraph"><p>Now let&#8217;s checkout Kafka topic configs, that were provisioned by starter:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-logs hljs" data-lang="logs">$ docker exec -ti kafka /bin/bashroot@4874c1726187:/# kafka-topics --zookeeper zookeeper:2181 --list__confluent.support.metrics__consumer_offsetsresultstasksroot@4874c1726187:/# kafka-topics --zookeeper zookeeper:2181 --describe --topic tasksTopic:tasks    PartitionCount:4    ReplicationFactor:1    Configs:retention.ms=360000,cleanup.policy=deleteTopic: tasks    Partition: 0    Leader: 1    Replicas: 1    Isr: 1Topic: tasks    Partition: 1    Leader: 1    Replicas: 1    Isr: 1Topic: tasks    Partition: 2    Leader: 1    Replicas: 1    Isr: 1Topic: tasks    Partition: 3    Leader: 1    Replicas: 1    Isr: 1root@4874c1726187:/# kafka-topics --zookeeper zookeeper:2181 --describe --topic resultsTopic:results    PartitionCount:4    ReplicationFactor:1    Configs:retention.ms=360000,cleanup.policy=deleteTopic: results    Partition: 0    Leader: 1    Replicas: 1    Isr: 1Topic: results    Partition: 1    Leader: 1    Replicas: 1    Isr: 1Topic: results    Partition: 2    Leader: 1    Replicas: 1    Isr: 1Topic: results    Partition: 3    Leader: 1    Replicas: 1    Isr: 1</code></pre></div></div><div class="paragraph"><p>So, as we can see Kafka Provision Spring boot starter has created required topics for us and added specified configs.</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/zghurskyi/kafka-provision-spring-boot-starter&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kafka Provision Spring Boot Starter&lt;/a&gt; enables distributed Kafka topics provisioning and centralized topic configs management.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Apache Kafka" scheme="https://www.zghurskyi.com/categories/apache-kafka/"/>
    
      <category term="Spring Boot Starter" scheme="https://www.zghurskyi.com/categories/apache-kafka/spring-boot-starter/"/>
    
      <category term="Topic Provisioning" scheme="https://www.zghurskyi.com/categories/apache-kafka/spring-boot-starter/topic-provisioning/"/>
    
    
      <category term="Apache Kafka" scheme="https://www.zghurskyi.com/tags/apache-kafka/"/>
    
      <category term="Spring Boot Starter" scheme="https://www.zghurskyi.com/tags/spring-boot-starter/"/>
    
      <category term="Topic Provisioning" scheme="https://www.zghurskyi.com/tags/topic-provisioning/"/>
    
  </entry>
  
  <entry>
    <title>Relational Database Transaction</title>
    <link href="https://www.zghurskyi.com/database-transaction/"/>
    <id>https://www.zghurskyi.com/database-transaction/</id>
    <published>2019-06-20T00:53:41.000Z</published>
    <updated>2019-10-16T00:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Database Transaction represents a unit of work, that is atomic, consistent, isolated and durable (a.k.a. <code>ACID</code>).</p></div><a id="more"></a><div class="sect1"><h2>Database Transaction</h2><div class="sectionbody"><div class="paragraph"><p><code>ACID</code> guarantees are provided by traditional relational database management systems (RDBMS).</p></div><div class="ulist"><ul><li><p><code>Atomicity</code> means that operations, that constitute transaction are all either succeed or fail together. So, atomicity implies that there can&#8217;t be situation, in which part of operations succeeded and part failed.</p></li><li><p><code>Consistency</code> means that transaction leaves database in consistent state after execution. So, in practical terms, any data written to database must be valid according to integrity constraints (primary key/foreign key/unique key/etc.), cascades, triggers, and any combination thereof.</p></li><li><p><code>Isolation</code> determines how operations performed in a transaction are visible to other executing transactions. So, for example, whether data written by transaction is available for read by other concurrent transactions.</p></li><li><p><code>Durability</code> means that after transaction is committed, database changes are saved permanently. So, if database crushes all committed transactions will be restored. This is most often implemented by using transaction log stored in non-volatile storage. And transaction is committed only after it is entered in the log.</p></li></ul></div></div></div><div class="sect1"><h2>Transaction states</h2><div class="sectionbody"><div class="paragraph"><p>During execution database transaction goes through number of states:</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/transaction_state_machine.png"><img src="/images/transaction_state_machine.png" alt="transaction state machine"></a></div></div></div></div><div class="sect2"><h3>State transitions example</h3><div class="paragraph"><p>Assume we have two accounts: one for Alice (account A) and one for Bob (account B). Initially each account has 1000$ balance. The task is to transfer 100$ from account A to account B.</p></div><div class="paragraph"><p>Database transaction for above situation can be represented as follows (in PostgreSQL syntax):</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql">BEGIN;UPDATE accounts SET balance = balance - 100.00 WHERE name = 'Alice'; <i class="conum" data-value="1"></i><b>(1)</b>UPDATE accounts SET balance = balance + 100.00 WHERE name = 'Bob'; <i class="conum" data-value="2"></i><b>(2)</b>COMMIT;</code></pre></div></div><div class="paragraph"><p>Let&#8217;s follow state transitioning for this transaction:</p></div><div class="olist arabic"><ol class="arabic"><li><p>In <code>ACTIVE</code> state read/write operations on database are performed. So, any statements between <code>BEGIN</code> and <code>COMMIT</code> instructions form <code>ACTIVE</code> state.</p></li><li><p>If transaction reaches <code>COMMIT</code> without failures, then it goes into <code>PARTIALLY COMMITTED</code> state. In <code>PARTIALLY COMMITTED</code> state, balances will have values: A = 900 and B = 1100.</p></li><li><p>If the transaction executes <code>COMMIT</code> successfully, that is, if it successfully writes the new value of A and B into log file or stable storage, then the transaction is said to be in <code>COMMITTED</code> state.</p></li><li><p>Transaction may enter <code>FAILED</code> state:</p><div class="ulist"><ul><li><p>In <code>ACTIVE</code> state:</p><div class="olist loweralpha"><ol class="loweralpha" type="a"><li><p>before first <code>UPDATE</code> ended : then A = 1000 and B = 1000</p></li><li><p>after first <code>UPDATE</code> ended: then A = 900 and B = 1100</p></li><li><p>before <code>COMMIT</code> and after second <code>UPDATE</code>: then A = 900 and B = 1100</p></li></ol></div></li><li><p>In <code>PARTIALLY COMMITTED</code> state: then A = 900 and B = 1100</p></li></ul></div></li><li><p>The transaction enters <code>ABORTED</code> after rollback. In this state DBMS has to undo the changes made so far. So, whatever balances are at the beginning in <code>ABORTED</code> state, after roll back, the state will be reverted to the previous consistent state (A = 1000 and B = 1000)</p></li><li><p>After entering <code>COMMITTED</code> or <code>ABORTED</code> state, transaction is terminated</p></li></ol></div><div class="admonitionblock note"><table><tr><td class="icon"><i class="fa icon-note" title="Note"></i></td><td class="content"><div class="paragraph"><p><em>Why transaction may fail ?</em></p></div><div class="paragraph"><p>Database transaction might fail due to one or more of the following reasons:</p></div><div class="ulist"><ul><li><p>Server failure, e.g. hardware, software or network error, that causes database server to hang or crash</p></li><li><p>Logical transaction failure, e.g. user aborts transaction, division by zero etc.</p></li><li><p>Concurrency failure, e.g. if transaction causes deadlock, or violates serializability</p></li><li><p>Disk failure</p></li></ul></div><div class="paragraph"><p>DBMS usually can recover from server failure, logical failure or concurrency failure. To deal with disk failures - disk backups needs to be maintained.</p></div></td></tr></table></div></div></div></div><div class="sect1"><h2>Savepoints</h2><div class="sectionbody"><div class="paragraph"><p>It&#8217;s possible to control the statements in a transaction in a more granular fashion through the use of <a href="https://www.postgresql.org/docs/8.3/tutorial-transactions.html" target="_blank" rel="noopener">savepoints</a>. Savepoints allow you to selectively discard parts of the transaction, while committing the rest. After defining a savepoint with <code>SAVEPOINT</code>, you can if needed roll back to the savepoint with <code>ROLLBACK TO</code>. All the transaction&#8217;s database changes between defining the savepoint and rolling back to it are discarded, but changes earlier than the savepoint are kept.</p></div><div class="paragraph"><p>After rolling back to a savepoint, it continues to be defined, so you can roll back to it several times. Conversely, if you are sure you won&#8217;t need to roll back to a particular savepoint again, it can be released, so the system can free some resources. Keep in mind that either releasing or rolling back to a savepoint will automatically release all savepoints that were defined after it.</p></div><div class="paragraph"><p>Suppose we debit $100.00 from Alice&#8217;s account, and credit Bob&#8217;s account, only to find later that we should have credited Wally&#8217;s account. We could do it using savepoints like this:</p></div><div class="listingblock"><div class="content"><pre class="highlightjs highlight"><code class="language-sql hljs" data-lang="sql">BEGIN;UPDATE accounts SET balance = balance - 100.00 WHERE name = 'Alice';SAVEPOINT my_savepoint;UPDATE accounts SET balance = balance + 100.00 WHERE name = 'Bob';-- oops ... forget that and use Wally's accountROLLBACK TO my_savepoint;UPDATE accounts SET balance = balance + 100.00 WHERE name = 'Wally';COMMIT;</code></pre></div></div><div class="paragraph"><p>This example is, of course, oversimplified, but there&#8217;s a lot of control to be had over a transaction block through the use of savepoints.</p></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>Even though this post may seem pretty dry, however, it lays good foundation to get started working with transactions in your Data Access Layer.</p></div><div class="paragraph"><p>In the next posts I will comeback to this topic from more practical perspective in the context of our lovely Spring Boot services. So, stay tuned ;)</p></div></div></div><div class="sect1"><h2>References</h2><div class="sectionbody"><div class="paragraph"><p><a href="https://www.postgresql.org/docs/8.3/tutorial-transactions.html" target="_blank" rel="noopener">PostgreSQL documentation</a></p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Database Transaction represents a unit of work, that is atomic, consistent, isolated and durable (a.k.a. &lt;code&gt;ACID&lt;/code&gt;).&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Data Access Layer" scheme="https://www.zghurskyi.com/categories/data-access-layer/"/>
    
      <category term="Transaction" scheme="https://www.zghurskyi.com/categories/data-access-layer/transaction/"/>
    
      <category term="ACID" scheme="https://www.zghurskyi.com/categories/data-access-layer/transaction/acid/"/>
    
    
      <category term="Data Access Layer" scheme="https://www.zghurskyi.com/tags/data-access-layer/"/>
    
      <category term="Transaction" scheme="https://www.zghurskyi.com/tags/transaction/"/>
    
      <category term="ACID" scheme="https://www.zghurskyi.com/tags/acid/"/>
    
  </entry>
  
  <entry>
    <title>Back-pressure patterns in practice</title>
    <link href="https://www.zghurskyi.com/backpressure/"/>
    <id>https://www.zghurskyi.com/backpressure/</id>
    <published>2019-06-19T10:58:44.000Z</published>
    <updated>2019-10-07T10:58:44.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>Back-pressure is an important feedback mechanism that allows systems to gracefully respond to load rather than collapse under it. The back-pressure may cascade all the way up to the user, at which point responsiveness may degrade, but this mechanism will ensure that the system is resilient under load.</p></div><a id="more"></a><div class="sect1"><h2>Back-Pressure</h2><div class="sectionbody"><div class="paragraph"><p>This is how it&#8217;s defined in <a href="https://www.reactivemanifesto.org/glossary#Back-Pressure" target="_blank" rel="noopener">Reactive Manifesto</a>:</p></div><div class="quoteblock"><blockquote><div class="paragraph"><p><strong>Back-Pressure</strong></p></div><div class="paragraph"><p>When one component is struggling to keep-up, the system as a whole needs to respond in a sensible way. It is unacceptable for the component under stress to fail catastrophically or to drop messages in an uncontrolled fashion. Since it can’t cope and it can’t fail it should communicate the fact that it is under stress to upstream components and so get them to reduce the load. This back-pressure is an important feedback mechanism that allows systems to gracefully respond to load rather than collapse under it. The back-pressure may cascade all the way up to the user, at which point responsiveness may degrade, but this mechanism will ensure that the system is resilient under load, and will provide information that may allow the system itself to apply other resources to help distribute the load.</p></div></blockquote></div><div class="paragraph"><p>Let&#8217;s illustrate the context, that requires to apply back-pressure.</p></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/backpressure.png"><img src="/images/backpressure.png" alt="backpressure"></a></div></div></div></div><div class="paragraph"><p>So, essentially the problem here is the mismatch in throughput between services.</p></div></div></div><div class="sect1"><h2>Strategies to deal with throughput mismatch</h2><div class="sectionbody"><div class="paragraph"><p>There are several strategies to deal with throughput mismatch:</p></div><div class="ulist"><ul><li><p><em>Auto-scale</em> service, that is under pressure</p></li><li><p><em>Drop down (or sample)</em> incoming requests, once service under pressure is saturated</p></li><li><p><em>Buffer</em> requests</p></li><li><p><em>Control</em> the request producer</p></li></ul></div><div class="sect2"><h3>Auto-scaling</h3><div class="paragraph"><p>Probably, auto-scaling is the easiest way to deal with the problem. E.g. in the example above the solution would be to scale the <strong>service B</strong> up - this definitely will resolve throughput deficit. In some cases this will be just enough, but in other - auto-scaling might lead to propagating the problem to the next service (e.g. <strong>service C</strong>). Also, if you are in severe cost/hardware deficit, scaling up is simply not feasible.</p></div></div><div class="sect2"><h3>Dropping down or sampling</h3><div class="paragraph"><p>Only some fraction of incoming requests is processed, other are simply ignored. E.g. in the example above to solve the problem it would be enough for <strong>service B</strong> to just skip processing every 3rd request. However, most often it&#8217;s not applicable in practice</p></div></div><div class="sect2"><h3>Buffering requests</h3><div class="paragraph"><p>Probably, applying buffer is the most intuitive thing to do. E.g. in the example above this approach can be implemented by introducing messaging queue between <strong>service A and B</strong> or, alternatively, storing incoming request to the database. This, in essence, allows <strong>service B</strong> to pull requests from buffer, when it&#8217;s ready to process them. However, beside the complication in infrastructure it&#8217;s not always possible, since not all requests might be processed asynchronously.</p></div></div><div class="sect2"><h3>Controlling the request producer</h3><div class="paragraph"><p>Controlling the request producer is, actually, defined as"back-pressure" by Reactive Manifesto. In the example above it means, that <strong>service B</strong> should be able to slow down/speed up <strong>service A</strong>. So, <strong>service A</strong> should not <em>push</em> requests to <strong>service B</strong>, instead <strong>service B</strong> should <em>pull</em> desired number of requests from <strong>service A</strong>. However, controlling producer speed is not always an option (imaging telling your user to slow down). Also, back-pressure mechanism introduces complexity in the system, so should be decided carefully.</p></div></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="paragraph"><p>Whenever there is a mismatch in throughput between services there might be the opportunity to apply back-pressure pattern.</p></div><div class="paragraph"><p>What strategy should be applied really depends on the constraints and requirements at hand.</p></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;Back-pressure is an important feedback mechanism that allows systems to gracefully respond to load rather than collapse under it. The back-pressure may cascade all the way up to the user, at which point responsiveness may degrade, but this mechanism will ensure that the system is resilient under load.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://www.zghurskyi.com/categories/reactive/"/>
    
      <category term="Back-Pressure" scheme="https://www.zghurskyi.com/categories/reactive/back-pressure/"/>
    
    
      <category term="back-pressure" scheme="https://www.zghurskyi.com/tags/back-pressure/"/>
    
  </entry>
  
  <entry>
    <title>Blocking vs Not-Blocking</title>
    <link href="https://www.zghurskyi.com/blocking-vs-nonblocking/"/>
    <id>https://www.zghurskyi.com/blocking-vs-nonblocking/</id>
    <published>2019-06-18T14:45:13.000Z</published>
    <updated>2019-10-17T22:50:07.000Z</updated>
    
    <content type="html"><![CDATA[<div class="paragraph"><p>An important aspect of <code>reactive</code> approach to concurrent programming is non-blocking processing. This post compares blocking vs non-blocking processing in general terms to highlight <code>reactive</code> idea in a nutshell.</p></div><a id="more"></a><div class="sect1"><h2>Blocking Processing</h2><div class="sectionbody"><div class="paragraph"><p>Blocking (synchronous) processing has several characteristics:</p></div><div class="ulist"><ul><li><p><strong>Bound to the processing thread</strong></p></li><li><p>Processing thread is waiting in case any I/O operation is performed</p></li></ul></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/blocking-processing.svg"><img src="/images/blocking-processing.svg" alt="blocking processing"></a></div></div></div></div><div class="paragraph"><p>Under highload this approach has following consequences:</p></div><div class="ulist"><ul><li><p><strong>CPU &amp; RAM resources are wasted</strong>, while thread is waiting to the I/O results.</p></li><li><p>If all threads are waiting, new user requests are either put to the queue or dropped down. This leads to poor user experience.</p></li><li><p>If all threads are waiting, service becomes unresponsive for API clients. This leads to timeouts and API clients failure. Basically, <strong>failure leads to more failure</strong>.</p></li></ul></div></div></div><div class="sect1"><h2>Non-Blocking Processing</h2><div class="sectionbody"><div class="paragraph"><p>Non-Blocking (aka <code>reactive</code>) processing has several characteristics:</p></div><div class="ulist"><ul><li><p><strong>Not bound to specific processing thread</strong></p></li><li><p><strong>Threads are not waiting</strong> in case I/O operation is performed</p></li><li><p>Threads are reused between calls</p></li></ul></div><div class="openblock text-center"><div class="content"><div class="imageblock img-responsive img-thumbnail"><div class="content"><a class="image" href="/images/nonblocking-processing.svg"><img src="/images/nonblocking-processing.svg" alt="nonblocking processing"></a></div></div></div></div><div class="paragraph"><p>Under highload this approach has following consequences:</p></div><div class="ulist"><ul><li><p>High CPU &amp; RAM utilization</p></li><li><p>Less threads are needed to serve same number of requests as in blocking case</p></li></ul></div><div class="paragraph"><p>However, non-blocking procesing comes with a cost:</p></div><div class="ulist"><ul><li><p>Backend design is complicated, since the need to track origin and arrival of responses &amp; errors. This require new design patterns to be employed (hopefully, wrapped into frameworks like <a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">RxJava</a> and <a href="https://github.com/reactor" target="_blank" rel="noopener">Project Reactor</a>).</p></li><li><p>Frontend design is complicated, since responses will come asynchronously via <a href="https://en.wikipedia.org/wiki/WebSocket" target="_blank" rel="noopener">websockets</a>, <a href="https://en.wikipedia.org/wiki/Server-sent_events" target="_blank" rel="noopener">server-sent events</a>, etc.</p></li></ul></div></div></div><div class="sect1"><h2>Conclusion</h2><div class="sectionbody"><div class="ulist"><ul><li><p>In both cases response time is limited by I/O operations (filesystem, database, network) and response time of downstream services.</p></li><li><p>Threads used for non-blocking processing don&#8217;t wait for I/O operations to complete. This gives better resource utilization and increases throughput, compared to blocking processing.</p></li></ul></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;paragraph&quot;&gt;&lt;p&gt;An important aspect of &lt;code&gt;reactive&lt;/code&gt; approach to concurrent programming is non-blocking processing. This post compares blocking vs non-blocking processing in general terms to highlight &lt;code&gt;reactive&lt;/code&gt; idea in a nutshell.&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="Reactive" scheme="https://www.zghurskyi.com/categories/reactive/"/>
    
      <category term="Blocking processing" scheme="https://www.zghurskyi.com/categories/reactive/blocking-processing/"/>
    
      <category term="Non-blocking processing" scheme="https://www.zghurskyi.com/categories/reactive/blocking-processing/non-blocking-processing/"/>
    
    
      <category term="Reactive" scheme="https://www.zghurskyi.com/tags/reactive/"/>
    
      <category term="Blocking processing" scheme="https://www.zghurskyi.com/tags/blocking-processing/"/>
    
      <category term="Non-blocking processing" scheme="https://www.zghurskyi.com/tags/non-blocking-processing/"/>
    
  </entry>
  
</feed>
